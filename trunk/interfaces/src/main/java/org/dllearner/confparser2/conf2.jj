/**
 * Copyright (C) 2007-2011, Jens Lehmann
 *
 * This file is part of DL-Learner.
 * 
 * DL-Learner is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DL-Learner is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * New version of conf file parser, which prepares a conf file for
 * conversion into a Spring configuration. 
 */

options {
  JDK_VERSION = "1.6";
  STATIC = false; 
}

PARSER_BEGIN(ConfParser)
package org.dllearner.confparser2; 

import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.SortedSet;
import java.util.TreeSet;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.dllearner.Info;

import org.dllearner.cli.*;
import org.dllearner.parser.KBParser;
import org.dllearner.utilities.datastructures.*;

public class ConfParser {
	
	// examples
	private SortedSet<String> positiveExamples = new TreeSet<String>();
	private SortedSet<String> negativeExamples = new TreeSet<String>();
	
	// conf file options
	private List<ConfFileOption> confOptions = new LinkedList<ConfFileOption>();
	private Map<String,ConfFileOption> confOptionsByName = new HashMap<String,ConfFileOption>();
	private Map<String,List<ConfFileOption>> confOptionsByPrefix = new HashMap<String,List<ConfFileOption>>();
	
	private void addConfOption(ConfFileOption confOption) {
		confOptions.add(confOption);
		confOptionsByName.put(confOption.getFullName(), confOption);
		String prefix = confOption.getOption();
		if(confOptionsByPrefix.containsKey(prefix))
			confOptionsByPrefix.get(prefix).add(confOption);
		else {
			LinkedList<ConfFileOption> optionList = new LinkedList<ConfFileOption>();
			optionList.add(confOption);
			confOptionsByPrefix.put(prefix,optionList);
		}
	}
	
	public SortedSet<String> getPositiveExamples() {
		return positiveExamples;
	}
	
	public SortedSet<String> getNegativeExamples() {
		return negativeExamples;
	} 
	
	public List<ConfFileOption> getConfOptions() {
		return confOptions;
	}
	
	public Map<String,ConfFileOption> getConfOptionsByName() {
		return confOptionsByName;
	}

	public ConfFileOption getConfOptionsByName(String name) {
		return confOptionsByName.get(name);
	}
	
	public Map<String,List<ConfFileOption>> getConfOptionsByPrefix() {
		return confOptionsByPrefix;
	}
	
	public List<ConfFileOption> getConfOptionsByPrefix(String prefix) {
		return confOptionsByPrefix.get(prefix);
	}
	
	public static ConfParser parseFile(File filename) throws FileNotFoundException, ParseException {
		ConfParser parser = new ConfParser(new FileInputStream(filename));
		parser.Start();
		return parser;
	}
	
}
PARSER_END(ConfParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
} 

TOKEN :
{
    < COMMAND_END: "." >
  | < CONF_END: ";" >
  | < POS_EX: "+" >
  | < NEG_EX: "-" >
  | < ID: ["a"-"z"] (["_","a"-"z","A"-"Z","0"-"9"])* >
  | < NUMBER: (["1"-"9"] (["0"-"9"])* | "0") >
  | < DOUBLE: (["1"-"9"] (["0"-"9"])* | "0") "." (["0"-"9"])* >
  | <TOP: "TOP" >
  | <BOTTOM: "BOTTOM" >
  | <AND: "AND" >
  | <OR: "OR" >
  | <EXISTS: "EXISTS" | "SOME" >
  | <ALL: "ALL" | "FORALL" >
  | <NOT: "NEG" | "NOT" >
  | <GE: ">=" >
  | <LE: "<=" >
  | <STRING: "\"" (~["\"","\\","\n","\r"])* "\"">
}

void Start() : 
{
	ConfFileOption confOption;
}
{
  (		// perform lookahead until the we find a semicolon
  		LOOKAHEAD(Id() [ "." Id() ] "="  ( Id() | Integer() | Double() | String() 
  	| "{" | "[" ))  confOption=ConfOption()  		  
  	   { addConfOption(confOption); }
  		// detection of positive and negative examples using "+" and "-"
  	|	LOOKAHEAD(<POS_EX>) PosExample()
  	|	LOOKAHEAD(<NEG_EX>) NegExample()
  )*
  <EOF>
}

ConfFileOption ConfOption() : 
{
	boolean containsSubOption=false, isNumeric=false, isDouble=false, isSet=false, isList=false, useColon=false;
	String option="", subOption="", value="", value1="", value2="", tmp="", tmp2=""; 
	int number = 0;
	double numberDouble = 0;
	ConfFileOption confOption;
	Set<String> values = new HashSet<String>();
	List<StringTuple> tuples = new LinkedList<StringTuple>();
}
{
  option=Id() [ "." subOption=Id() {containsSubOption=true;} ] 
  "="  (  // two strings separated by a double colon
         LOOKAHEAD(2) value1=Id() ":" value2=Id() { useColon = true; }
         // simple string
         | value=Id()
  		 // simple string enclosed in quotes
         | value=String()
         | number=Integer() {isNumeric=true;} 
         | numberDouble=Double() {isNumeric=true; isDouble=true;}
         // empty set
         | LOOKAHEAD("{" "}") "{" "}" {isSet=true;}
         // set with several elements 
         | "{" ( LOOKAHEAD(4) ( tmp=String() | tmp=ComplexId() ) { values.add(tmp);} "," )* 
           (tmp=String() | tmp=ComplexId()) {values.add(tmp);} "}" {isSet=true;}  
         // empty list
         | LOOKAHEAD("[" "]") "[" "]" {isList=true;}
         // a list with several elements, which tuples
         // e.g. [("a","b"),("c","d")]
         | "[" 
           ( LOOKAHEAD(6) "(" (tmp=String() | tmp=Id()) "," (tmp2=String() | tmp2=Id()) ")"
           {tuples.add(new StringTuple(tmp,tmp2));} "," )*
           "(" (tmp=String() | tmp=Id()) "," (tmp2=String() | tmp2=Id()) ")"
           {tuples.add(new StringTuple(tmp,tmp2));} 
           "]" {isList=true;}         
         ) <CONF_END>
  {
  	if(containsSubOption) {
  		if(isNumeric)
  			if(isDouble)
	  			confOption = new ConfFileOption(option,subOption,numberDouble);
	  		else
		  		confOption = new ConfFileOption(option,subOption,number);
  		else
  			if(isSet)
  				confOption = new ConfFileOption(option,subOption,values);
  			else if(isList)
  				confOption = new ConfFileOption(option,subOption,tuples);
  			else  			{ // this is just a temporary hack to get the double colon notation working;
  			  // of course we can pass value1 and value2 as separate parameters later on
  			  if(useColon)
  				confOption = new ConfFileOption(option,subOption,value1 + ":" + value2);
  			  else
  				confOption = new ConfFileOption(option,subOption,value);  			}
  				
  	} else {
  		if(isNumeric)
  			if(isDouble)
	  			confOption = new ConfFileOption(option,numberDouble);
	  		else
	  			confOption = new ConfFileOption(option,number);
  		else
  			if(isSet)
	  			confOption = new ConfFileOption(option,values);
  			else if(isList)
  				confOption = new ConfFileOption(option,tuples);	  			
	  		else
	  			confOption = new ConfFileOption(option,value);
  	}
  	return confOption;
  }
}

void PosExample() : { String i; }
{
  	<POS_EX> i=Individual()
  	{ positiveExamples.add(i); }
}

void NegExample() : { String i; }
{
  	<NEG_EX> i=Individual()
  	{ negativeExamples.add(i); }
}

String Individual() :
{
	String name;
}
{
	(name=Id() | name=String())
	{
		return KBParser.getInternalURI(name);
	}
}

String ComplexId() :
{  Token t1,t2;
}
{
  LOOKAHEAD(2) t1=<ID> ":" t2=<ID> { return t1.image + ":" + t2.image; }  
 |t1=<ID> { return t1.image; }
}
 

String Id() : 
{
  Token t;
}
{
  t=<ID>
  {
    return t.image;
  }
}

double Double() : 
{
  Token t;
}
{
  t=<DOUBLE>
  {
    return new Double(t.image);
  }
}

int Integer() : 
{
  Token t;
}
{
  t=<NUMBER>
  {
    return new Integer(t.image);
  }
}

String String() : 
{
  Token t;
  String s;
}
{
  t=<STRING>
  {
    // enclosing "" are removed
    s = t.image;
    s = s.substring(1, s.length() - 1);
    return s;
  }
}

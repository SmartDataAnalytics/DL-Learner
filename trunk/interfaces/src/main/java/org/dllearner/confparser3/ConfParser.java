/* Generated By:JavaCC: Do not edit this line. ConfParser.java */
package org.dllearner.confparser3;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dllearner.cli.ConfFileOption2;
import org.dllearner.parser.KBParser;
import org.dllearner.utilities.datastructures.StringTuple;

public class ConfParser implements ConfParserConstants {

        // conf file options
        private List<ConfFileOption2> confOptions = new LinkedList<ConfFileOption2>();
        private Map<String,ConfFileOption2> confOptionsByProperty = new HashMap<String,ConfFileOption2>();
        private Map<String,List<ConfFileOption2>> confOptionsByBean = new HashMap<String,List<ConfFileOption2>>();

        private void addConfOption(ConfFileOption2 confOption) {
                confOptions.add(confOption);
                confOptionsByProperty.put(confOption.getPropertyName(), confOption);
                String beanName = confOption.getBeanName();
                if(confOptionsByBean.containsKey(beanName))
                        confOptionsByBean.get(beanName).add(confOption);
                else {
                        LinkedList<ConfFileOption2> optionList = new LinkedList<ConfFileOption2>();
                        optionList.add(confOption);
                        confOptionsByBean.put(beanName,optionList);
                }
        }

        public List<ConfFileOption2> getConfOptions() {
                return confOptions;
        }

        public Map<String,ConfFileOption2> getConfOptionsByProperty() {
                return confOptionsByProperty;
        }

        public ConfFileOption2 getConfOptionsByProperty(String propertyName) {
                return confOptionsByProperty.get(propertyName);
        }

        public Map<String,List<ConfFileOption2>> getConfOptionsByBean() {
                return confOptionsByBean;
        }

        public List<ConfFileOption2> getConfOptionsByBean(String beanName) {
                return confOptionsByBean.get(beanName);
        }

        public static ConfParser parseFile(File filename) throws FileNotFoundException, ParseException {
                ConfParser parser = new ConfParser(new FileInputStream(filename));
                parser.Start();
                return parser;
        }

  final public void Start() throws ParseException {
        ConfFileOption2 confOption;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      confOption = ConfOption();
             addConfOption(confOption);
    }
    jj_consume_token(0);
  }

  final public ConfFileOption2 ConfOption() throws ParseException {
        boolean containsSubOption=false;
        String value="", value1="", value2="", tmp="", tmp2="";
        Set<String> values = new HashSet<String>();
        List<StringTuple> tuples = new LinkedList<StringTuple>();

        ConfFileOption2 option = new ConfFileOption2();
        boolean inQuotes = false;
        String beanName;
        String propertyName = "";
        String propertyValue;
        Class<?> propertyType;
        Object val = null;
    beanName = Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMAND_END:
      jj_consume_token(COMMAND_END);
      propertyName = Id();
                                           containsSubOption=true;
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      // two strings separated by a double colon
               // LOOKAHEAD(2) value1=Id() ":" value2=Id() { useColon = true; }
               // simple string
                 propertyValue = Id();
                                  val = propertyValue; propertyType = String.class;
      break;
    case STRING:
      propertyValue = String();
                                      val = propertyValue; inQuotes = true; propertyType = String.class;
      break;
    case NUMBER:
      val = Integer();
                             propertyValue = val.toString(); propertyType = Integer.class;
      break;
    case DOUBLE:
      val = Double();
                            propertyValue = val.toString(); propertyType = Double.class;
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_4(2147483647)) {
        jj_consume_token(26);
        jj_consume_token(27);
                                        val = new HashSet(); propertyType = Set.class; propertyValue = "{}";
      } else if (jj_2_5(4)) {
        jj_consume_token(26);
        label_2:
        while (true) {
          if (jj_2_1(2)) {
            ;
          } else {
            break label_2;
          }
          tmp = String();
                                                           values.add(tmp);
          jj_consume_token(28);
        }
        tmp = String();
                         values.add(tmp);
        jj_consume_token(27);
             propertyType = Set.class; propertyValue = "{ TODO }";
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          jj_consume_token(26);
          label_3:
          while (true) {
            if (jj_2_2(4)) {
              ;
            } else {
              break label_3;
            }
            tmp = Id();
                                         values.add(tmp);
            jj_consume_token(28);
          }
          tmp = Id();
                        values.add(tmp);
          jj_consume_token(27);
             val = values; propertyType = Set.class; propertyValue = "{ TODO }";
          break;
        default:
          jj_la1[7] = jj_gen;
          if (jj_2_6(2147483647)) {
            jj_consume_token(29);
            jj_consume_token(30);
                                        val = new LinkedList(); propertyType = List.class; propertyValue = "[]";
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 29:
              jj_consume_token(29);
              label_4:
              while (true) {
                if (jj_2_3(6)) {
                  ;
                } else {
                  break label_4;
                }
                jj_consume_token(31);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case STRING:
                  tmp = String();
                  break;
                case ID:
                  tmp = Id();
                  break;
                default:
                  jj_la1[2] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                jj_consume_token(28);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case STRING:
                  tmp2 = String();
                  break;
                case ID:
                  tmp2 = Id();
                  break;
                default:
                  jj_la1[3] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                jj_consume_token(32);
            tuples.add(new StringTuple(tmp,tmp2));
                jj_consume_token(28);
              }
              jj_consume_token(31);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case STRING:
                tmp = String();
                break;
              case ID:
                tmp = Id();
                break;
              default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              jj_consume_token(28);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case STRING:
                tmp2 = String();
                break;
              case ID:
                tmp2 = Id();
                break;
              default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              jj_consume_token(32);
            tuples.add(new StringTuple(tmp,tmp2));
              jj_consume_token(30);
                 val = values; propertyType = List.class;
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
        if(containsSubOption) {
                option.setInQuotes(inQuotes);
                option.setBeanName(beanName);
                option.setPropertyName(propertyName);
                option.setPropertyType(propertyType);
                option.setValueObject(val);
        } else {
                // ... currently nothing here (maybe special parser directives)
        }
        {if (true) return option;}
    throw new Error("Missing return statement in function");
  }

  final public String Individual() throws ParseException {
        String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      name = Id();
      break;
    case STRING:
      name = String();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return KBParser.getInternalURI(name);}
    throw new Error("Missing return statement in function");
  }

  final public String ComplexId() throws ParseException {
  Token t1,t2;
    if (jj_2_7(2)) {
      t1 = jj_consume_token(ID);
      jj_consume_token(33);
      t2 = jj_consume_token(ID);
                                     {if (true) return t1.image + ":" + t2.image;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t1 = jj_consume_token(ID);
            {if (true) return t1.image;}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Id() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Double Double() throws ParseException {
  Token t;
    t = jj_consume_token(DOUBLE);
    {if (true) return new Double(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Integer Integer() throws ParseException {
  Token t;
    t = jj_consume_token(NUMBER);
    {if (true) return new Integer(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public String String() throws ParseException {
  Token t;
  String s;
    t = jj_consume_token(STRING);
    // enclosing "" are removed
    s = t.image;
    s = s.substring(1, s.length() - 1);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_8() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(26)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_5()) return true;
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(31)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    if (jj_scan_token(28)) return true;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    if (jj_scan_token(32)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(26)) return true;
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ConfParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x100,0x1001000,0x1001000,0x1001000,0x1001000,0x1007000,0x4000000,0x20000000,0x1001000,0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ConfParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConfParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ConfParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ConfParser(ConfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ConfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

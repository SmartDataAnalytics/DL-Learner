/* Generated By:JavaCC: Do not edit this line. DUDE_Parser.java */
package org.dllearner.algorithm.tbsl.sem.dudes.reader;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.dllearner.algorithm.tbsl.sem.drs.*;
import org.dllearner.algorithm.tbsl.sem.dudes.data.*;
import org.dllearner.algorithm.tbsl.sem.util.*;
import org.dllearner.algorithm.tbsl.sparql.Slot;
import org.dllearner.algorithm.tbsl.sparql.SlotType;

public class DUDE_Parser implements DUDE_ParserConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    DUDE_Parser parser = new DUDE_Parser(System.in);
    parser.Input();
  }

/** Root production. */
  final public void Input() throws ParseException {
    DUDE();
    jj_consume_token(0);
  }

/** DUDE */
  final public Dude DUDE() throws ParseException {
  Token referent;
  Token label;
  Type type;
  List<DRS> drs_list = null;
  List<DominanceConstraint> constraints = null;
  List<Argument> arg_list = null;
  List<Slot> slots = null;
    jj_consume_token(1);
    referent = dr();
    jj_consume_token(2);
    label = jj_consume_token(LABEL);
    jj_consume_token(2);
    type = Type();
    jj_consume_token(2);
    jj_consume_token(3);
    if (jj_2_1(2)) {
      drs_list = DRS_List();
    } else {
      ;
    }
    jj_consume_token(4);
    jj_consume_token(2);
    jj_consume_token(3);
    if (jj_2_2(2)) {
      arg_list = Arg_List();
    } else {
      ;
    }
    jj_consume_token(4);
    jj_consume_token(2);
    jj_consume_token(3);
    if (jj_2_3(2)) {
      constraints = DC_List();
    } else {
      ;
    }
    jj_consume_token(4);
    jj_consume_token(2);
    jj_consume_token(3);
    if (jj_2_4(2)) {
      slots = Slot_List();
    } else {
      ;
    }
    jj_consume_token(4);
    jj_consume_token(5);
      Dude dude = new Dude();
      dude.setReferent(referent.toString());
      dude.setType(type);
      if (drs_list != null) dude.setComponents(drs_list);
      dude.setLabel(new Label(label.toString()));
      if (arg_list != null) dude.setArguments(arg_list);
      if (constraints != null) dude.setDominanceConstraints(constraints);
      if (slots != null) dude.setSlots(slots);
      {if (true) return dude;}
    throw new Error("Missing return statement in function");
  }

  final public DominanceConstraint DominanceConstraint() throws ParseException {
   Label label1;
   Label label2;
   Token domType;
   DominanceConstraint dc = null;
    if (jj_2_5(2)) {
      label1 = Label();
      jj_consume_token(1);
      label2 = Label();
        dc = new DominanceConstraint(label1,label2);
        {if (true) return dc;}
    } else if (jj_2_6(2)) {
      label1 = Label();
      jj_consume_token(5);
      label2 = Label();
        dc = new DominanceConstraint(label2,label1);
        {if (true) return dc;}
    } else if (jj_2_7(2)) {
      label1 = Label();
      jj_consume_token(6);
      label2 = Label();
                dc = new DominanceConstraint(label1,label2);
                        dc.setType(DomType.equal);
                        {if (true) return dc;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Label Label() throws ParseException {
  Token label;
    if (jj_2_8(2)) {
      label = jj_consume_token(LABEL);
     {if (true) return new Label(label.toString());}
    } else if (jj_2_9(2)) {
      jj_consume_token(7);
      label = jj_consume_token(LABEL);
      jj_consume_token(8);
          {if (true) return new Label(label.toString(),Position.res);}
    } else if (jj_2_10(2)) {
      jj_consume_token(9);
      label = jj_consume_token(LABEL);
      jj_consume_token(8);
          {if (true) return new Label(label.toString(),Position.scope);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<DominanceConstraint> DC_List() throws ParseException {
List<DominanceConstraint> dc_list = null;
DominanceConstraint dc = null;
    dc = DominanceConstraint();
    if (jj_2_11(2)) {
      jj_consume_token(2);
      dc_list = DC_List();
    } else {
      ;
    }
       if (dc_list == null)
       {
          dc_list = new ArrayList<DominanceConstraint>();
       }

        dc_list.add(0,dc);
        {if (true) return dc_list;}
    throw new Error("Missing return statement in function");
  }

  final public List<DRS> DRS_List() throws ParseException {
  DRS drs;
  List<DRS> drs_list = null;
    drs = DRS();
    if (jj_2_12(2)) {
      jj_consume_token(2);
      drs_list = DRS_List();
    } else {
      ;
    }
       if (drs_list == null)
       {
          drs_list = new ArrayList<DRS>();
       }

        drs_list.add(0,drs);
        {if (true) return drs_list;}
    throw new Error("Missing return statement in function");
  }

  final public List<Argument> Arg_List() throws ParseException {
  Argument argument;
  List<Argument> arg_list = null;
    argument = Argument();
    if (jj_2_13(2)) {
      jj_consume_token(2);
      arg_list = Arg_List();
    } else {
      ;
    }
       if (arg_list == null)
       {
          arg_list = new ArrayList<Argument>();
       }

        arg_list.add(0,argument);
        {if (true) return arg_list;}
    throw new Error("Missing return statement in function");
  }

  final public Argument Argument() throws ParseException {
  Token label;
  Token word;
  Token referent;
  Type type;
    jj_consume_token(10);
    label = jj_consume_token(LABEL);
    jj_consume_token(2);
    referent = dr();
    jj_consume_token(2);
    word = word();
    jj_consume_token(2);
    type = Type();
    jj_consume_token(8);
       Argument argument = new Argument();
       argument.setLabel(new Label(label.toString()));
       argument.setReferent(referent.toString());
       argument.setAnchor(word.toString());
       argument.setType(type);
       {if (true) return argument;}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
  Type argument;
  Type result;
  Token word;
    if (jj_2_14(2)) {
      jj_consume_token(1);
      argument = Type();
      jj_consume_token(2);
      result = Type();
      jj_consume_token(5);
        CompositeType type = new CompositeType();
        type.setArgumentType(argument);
        type.setResultType(result);
        {if (true) return type;}
    } else if (jj_2_15(2)) {
      word = word();
            ElementaryType type=null;
        if (word.toString().equals("e"))
               type = new ElementaryType(ElemType.e);
        if (word.toString().equals("t"))
           type = new ElementaryType(ElemType.t);
             {if (true) return type;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** DRS */
  final public DRS DRS() throws ParseException {
        Set<DiscourseReferent> dr_set = null;
        Set<DRS_Condition> conditions = null;
        DRS drs;
    Token label;
    label = jj_consume_token(LABEL);
    jj_consume_token(11);
    if (jj_2_16(2)) {
      dr_set = DR_Set();
    } else {
      ;
    }
    jj_consume_token(12);
    if (jj_2_17(2)) {
      conditions = Condition_List();
    } else {
      ;
    }
    jj_consume_token(4);
       if (dr_set == null)
       {
          dr_set = new HashSet<DiscourseReferent>();
       }
       drs = new DRS();
       drs.setLabel(label.toString());
       drs.setDiscourseReferents(dr_set);
       if (conditions != null)
       drs.setDRSConditions(conditions);
       {if (true) return drs;}
    throw new Error("Missing return statement in function");
  }

/** DR_Set*/
  final public Set<DiscourseReferent> DR_Set() throws ParseException {
   Token dr;
   Set<DiscourseReferent> dr_set=null;
    dr = dr();
    if (jj_2_18(2)) {
      jj_consume_token(2);
      dr_set = DR_Set();
    } else {
      ;
    }
      if (dr_set == null)
      {
         dr_set= new HashSet<DiscourseReferent>();
      }
      if (dr.toString().startsWith("?"))
      {
         dr_set.add(new DiscourseReferent(dr.toString().substring(1),true,false));
      }
      else if (dr.toString().startsWith("!"))
      {
         dr_set.add(new DiscourseReferent(dr.toString().substring(1),false,true));
      }
      else
      {
                 dr_set.add(new DiscourseReferent(dr.toString(),false,false));
      }
      {if (true) return dr_set;}
    throw new Error("Missing return statement in function");
  }

  final public Set<DRS_Condition> Condition_List() throws ParseException {
    DRS_Condition condition= null;
    Set<DRS_Condition> conditions = null;
    condition = Condition();
    if (jj_2_19(2)) {
      jj_consume_token(2);
      conditions = Condition_List();
    } else {
      ;
    }
    if (conditions == null)
      {
         conditions = new HashSet<DRS_Condition>();
      }
          conditions.add(condition);
      {if (true) return conditions;}
    throw new Error("Missing return statement in function");
  }

  final public DRS_Condition Condition() throws ParseException {
      List<DiscourseReferent> dr_list;
      Token dr1;
      Token dr2;
      Token dr;
      Token predicate;
      Token quantifier;
      DRS drs1;
      DRS drs2;
    if (jj_2_29(2)) {
      predicate = word();
      jj_consume_token(10);
      dr_list = DR_List();
      jj_consume_token(8);
        Simple_DRS_Condition condition;

        condition = new Simple_DRS_Condition();
        condition.setPredicate(predicate.toString());
        condition.setArguments(dr_list);
        {if (true) return condition;}
    } else if (jj_2_30(2)) {
      dr1 = dr();
      jj_consume_token(6);
      dr2 = dr();
        Simple_DRS_Condition condition;

        condition = new Simple_DRS_Condition();
        condition.setPredicate("equal");
        condition.addArgument(new DiscourseReferent(dr1.toString()));
                condition.addArgument(new DiscourseReferent(dr2.toString()));
        {if (true) return condition;}
    } else if (jj_2_31(2)) {
      jj_consume_token(13);
      drs1 = DRS();
       Negated_DRS drs = new Negated_DRS();
       drs.setDRS(drs1);
       {if (true) return drs;}
    } else if (jj_2_32(2)) {
      drs1 = DRS();
      if (jj_2_20(2)) {
        quantifier = jj_consume_token(EVERY);
      } else if (jj_2_21(2)) {
        quantifier = jj_consume_token(SOME);
      } else if (jj_2_22(2)) {
        quantifier = jj_consume_token(AFEW);
      } else if (jj_2_23(2)) {
        quantifier = jj_consume_token(MOST);
      } else if (jj_2_24(2)) {
        quantifier = jj_consume_token(THEMOST);
      } else if (jj_2_25(2)) {
        quantifier = jj_consume_token(THELEAST);
      } else if (jj_2_26(2)) {
        quantifier = jj_consume_token(HOWMANY);
      } else if (jj_2_27(2)) {
        quantifier = jj_consume_token(MANY);
      } else if (jj_2_28(2)) {
        quantifier = jj_consume_token(NO);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      dr = dr();
      drs2 = DRS();
                Complex_DRS_Condition drs;
        drs = new Complex_DRS_Condition();
                drs.setRestrictor(drs1);
        drs.setScope(drs2);
                drs.setReferent(new DiscourseReferent(dr.toString()));

                if (quantifier.toString().equals("EVERY")) {drs.setQuantifier(DRS_Quantifier.EVERY);}
                if (quantifier.toString().equals("SOME")) {drs.setQuantifier(DRS_Quantifier.SOME);}
                if (quantifier.toString().equals("MOST")) {drs.setQuantifier(DRS_Quantifier.MOST);}
                if (quantifier.toString().equals("THEMOST")) {drs.setQuantifier(DRS_Quantifier.THEMOST);}
                if (quantifier.toString().equals("THELEAST")) {drs.setQuantifier(DRS_Quantifier.THELEAST);}
                if (quantifier.toString().equals("AFEW")) {drs.setQuantifier(DRS_Quantifier.FEW);}
                if (quantifier.toString().equals("MANY")) {drs.setQuantifier(DRS_Quantifier.MANY);}
                if (quantifier.toString().equals("HOWMANY")) {drs.setQuantifier(DRS_Quantifier.HOWMANY);}
                if (quantifier.toString().equals("NO")) {drs.setQuantifier(DRS_Quantifier.NO);}
                if (quantifier.toString().equals("OR")) {drs.setQuantifier(DRS_Quantifier.OR);}

        {if (true) return drs;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** DR_List*/
  final public List<DiscourseReferent> DR_List() throws ParseException {
   Token dr;
   List<DiscourseReferent> dr_list=null;
    dr = dr();
    if (jj_2_33(2)) {
      jj_consume_token(2);
      dr_list = DR_List();
    } else {
      ;
    }
      if (dr_list == null)
      {
         dr_list= new ArrayList<DiscourseReferent>();
      }

      if (dr.toString().startsWith("?")) {
         dr_list.add(0,new DiscourseReferent(dr.toString().substring(1),true,false));
      }
      else if (dr.toString().startsWith("?")) {
         dr_list.add(0,new DiscourseReferent(dr.toString().substring(1),false,true));
      }
      else {
                 dr_list.add(0,new DiscourseReferent(dr.toString(),false,false));
      }

      {if (true) return dr_list;}
    throw new Error("Missing return statement in function");
  }

  final public List<Slot> Slot_List() throws ParseException {
  Slot slot;
  List<Slot> slots = null;
    slot = Slot();
    if (jj_2_34(2)) {
      jj_consume_token(2);
      slots = Slot_List();
    } else {
      ;
    }
       if (slots == null)
       {
         slots = new ArrayList<Slot>();
       }

        slots.add(slot);
        {if (true) return slots;}
    throw new Error("Missing return statement in function");
  }

  final public Slot Slot() throws ParseException {
  Token ref;
  Token type;
  SlotType slottype = null;
  List<String> words = null;
    ref = word();
    jj_consume_token(14);
    type = word();
    jj_consume_token(14);
    if (jj_2_35(2)) {
      words = Word_List();
    } else {
      ;
    }
     if (words == null)
     {
       words = new ArrayList<String>();
     }
         if (type.toString().equals("CLASS")) { slottype = SlotType.CLASS; }
         else if (type.toString().equals("RESOURCE")) { slottype = SlotType.RESOURCE; }
         else if (type.toString().equals("DATATYPEPROPERTY")) { slottype = SlotType.DATATYPEPROPERTY; }
         else if (type.toString().equals("OBJECTPROPERTY")) { slottype = SlotType.OBJECTPROPERTY; }
         else if (type.toString().equals("PROPERTY")) { slottype = SlotType.PROPERTY; }
         else if (type.toString().equals("SYMPROPERTY")) { slottype = SlotType.SYMPROPERTY; }
         else if (type.toString().equals("LITERAL")) { slottype = SlotType.LITERAL; }
         else { slottype = SlotType.UNSPEC; }

     {if (true) return new Slot(ref.toString(),slottype,words);}
    throw new Error("Missing return statement in function");
  }

  final public List<String> Word_List() throws ParseException {
  Token word;
  List<String> words = null;
    word = word();
    if (jj_2_36(2)) {
      jj_consume_token(15);
      words = Word_List();
    } else {
      ;
    }
       if (words == null)
       {
         words = new ArrayList<String>();
       }

        words.add(0,word.toString());
        {if (true) return words;}
    throw new Error("Missing return statement in function");
  }

  final public Token dr() throws ParseException {
               Token t;
    if (jj_2_37(2)) {
      t = jj_consume_token(A);
    } else if (jj_2_38(2)) {
      t = jj_consume_token(C);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                             {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token word() throws ParseException {
                 Token t;
    if (jj_2_39(2)) {
      t = jj_consume_token(A);
    } else if (jj_2_40(2)) {
      t = jj_consume_token(B);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                               {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_3_12() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(THEMOST)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(B)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(C)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(A)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(A)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(MOST)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(6)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(9)) return true;
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(NO)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(AFEW)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(1)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(7)) return true;
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(MANY)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(SOME)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(10)) return true;
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(6)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(THELEAST)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(HOWMANY)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(1)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(EVERY)) return true;
    return false;
  }

  private boolean jj_3R_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public DUDE_ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[40];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DUDE_Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DUDE_Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DUDE_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DUDE_Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DUDE_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DUDE_Parser(DUDE_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DUDE_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 40; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

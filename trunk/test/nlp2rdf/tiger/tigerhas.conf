
import("combined.rdf");

/*
("http://nlp2rdf.org/ontology/Sentence" AND EXISTS "http://nlp2rdf.org/ontology/syntaxTreeHasPart".("http://nlp2rdf.org/ontology/hasLemma" value werden))

*/
algorithm = refexamples;

refexamples.startClass = "http://nlp2rdf.org/ontology/Sentence";

refexamples.useAllConstructor = false;
refexamples.useExistsConstructor = true;
refexamples.useCardinalityRestrictions = false;
refexamples.useNegation = false;

refexamples.maxExecutionTimeInSeconds = 10;
refexamples.noisePercentage = 3;

refexamples.useDataHasValueConstructor = true;


refexamples.writeSearchTree = true;
refexamples.searchTreeFile = "log/tigerhas.txt";
refexamples.replaceSearchTree = true;
//valueFrequencyThreshold

 /**
 algorithm II". Valid options are [allowedConcepts, allowedRoles, 
 applyAllFilter, applyExistsFilter, cardinalityLimit, 
 expansionPenaltyFactor, forceRefinementLengthIncrease, 
 guaranteeXgoodDescriptions, heuristic, horizontalExpansionFactor, 
 ignoredConcepts, ignoredRoles, improveSubsumptionHierarchy, 
 instanceBasedDisjoints, logLevel, maxClassDescriptionTests, 
 maxExecutionTimeInSeconds, minExecutionTimeInSeconds, negationPenalty, 
 negativeWeight, noisePercentage, replaceSearchTree, searchTreeFile, 
 startClass, startNodeBonus, terminateOnNoiseReached, useAllConstructor, useBooleanDatatypes, 
 useCardinalityRestrictions, useDataHasValueConstructor, useDoubleDatatypes, 
 useExistsConstructor, useHasValueConstructor, useNegation, useOverlyGeneralList, 
 usePropernessChecks, useShortConceptConstruction, useStringDatatypes, 
 useTooWeakList, valueFrequencyThreshold, writeSearchTree]
**/

+"http://nlp2rdf.org/ontology/s16200"
+"http://nlp2rdf.org/ontology/s17511"
+"http://nlp2rdf.org/ontology/s18047"

-"http://nlp2rdf.org/ontology/s18309"
-"http://nlp2rdf.org/ontology/s18365"
-"http://nlp2rdf.org/ontology/s21639"


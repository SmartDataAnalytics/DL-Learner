loadJarFile("lib/modules/sparqlModule.jar");
runPreprocessingModule("org.dllearner.modules.SparqlModule");

// reasoner settings
reasoner = dig;
digReasonerURL = "http://localhost:8081";
useRetrievalForClassification = false;
refinement.useDIGMultiInstanceChecks = twoChecks;

// algorithm settings
algorithm = refinement;
refinement.horizontalExpansionFactor = 0.6;
refinement.quiet = false;
refinement.useTooWeakList = true;

// search tree protocol
refinement.writeSearchTree = true;
refinement.searchTreeFile = "SilentBob_searchTree.txt";

// control output
showIndividuals = true;
showConcepts = true;
showRoles = true;
showInternalKB = true;
showSubsumptionHierarchy = true;

runPreprocessingModule("org.dllearner.modules.SparqlModule");

hidePrefix="http://dbpedia.org/resource/";


refinement.useAllConstructor = false;
refinement.useExistsConstructor = true;
refinement.useNegation = false;
// missbraucht als number of recursions, wird minus 10 gerechnet
// es gilt:
/**
11 flach nicht zu empfehlen
12 Klassen f�r objects und properties of objects
13 Klassen f�r properties of objects und superklassen von klassen
**/
gp.numberOfIndividuals = 13;
// nur yago =0 , nur category = 1
// sollte nicht mit aufgenommen werden eher 3 listen mit uris
gp.crossoverPercent = 1;




+test("http://dbpedia.org/resource/Jason_Mewes").
+test("http://dbpedia.org/resource/Kevin_Smith").
-test("http://dbpedia.org/resource/Trey_Parker").
-test("http://dbpedia.org/resource/Matt_Stone").



/*
TBox[0]:
RBox[0]:
ABox[0]:

Subsumption Hierarchy is improved for Refinement Operator Based Algorithm
java.util.NoSuchElementException
        at java.util.TreeMap.key(Unknown Source)
        at java.util.TreeMap.firstKey(Unknown Source)
        at java.util.TreeSet.first(Unknown Source)
        at org.dllearner.reasoning.SubsumptionHierarchy.improveSubsumptionHierar
chy(Unknown Source)
        at org.dllearner.Main.<init>(Unknown Source)
        at org.dllearner.parser.DLLearner.main(Unknown Source)
        at org.dllearner.QuickStart.main(Unknown Source)


*/






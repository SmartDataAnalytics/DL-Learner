/**
Note: DBpedia is always subject to change, solutions will change over time

 * Solutions:
http://dbpedia.org/class/yago/Communicator109610660 (length 1, depth 1)
  http://dbpedia.org/class/yago/Scientist110560637 (length 1, depth 1)
  plus all ignored Concepts
  
  EXISTS http://dbpedia.org/property/birthDate.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/birthPlace.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/languagesspoken.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/occupation.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/order.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/predecessor.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/termStart.TOP (length 3, depth 2)
  
  Direct classes from DBPedia:
  dbpedia:class/yago/Person100007846 [http]
  dbpedia:class/yago/Head110162991 [http]
  dbpedia:class/yago/Woman110787470 [http]
  dbpedia:class/yago/Leader109623038 [http]
  dbpedia:class/yago/Scientist110560637 [http]
  dbpedia:class/yago/Chancellor109906986 [http]
dbpedia:class/yago/Politician110451263 [http]

*/


// ignore these
alg.ignoredConcepts = {
 "http://dbpedia.org/class/yago/Communicator109610660",
 "http://dbpedia.org/class/yago/Negotiator110351874",
 "http://dbpedia.org/class/yago/Representative110522035",
 "http://dbpedia.org/class/yago/Scientist110560637",
 "http://dbpedia.org/class/yago/HeadOfState110164747",
 "http://dbpedia.org/class/yago/Chancellor109906986",
 "http://dbpedia.org/class/yago/Head110162991"
 }
 
// SPARQL options
sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbpedia.openlinksw.com:8890/sparql"
sparql.defaultGraphURIs = {"http://dbpedia.org"}
sparql.recursionDepth = 1
//TODOREFACTOR check if predefinedFilter works at all
sparql.predefinedFilter = "YAGO"
// the set of objects as starting point for fragment selection
// (should be identical to the set of examples)
sparql.instances = {
  "http://dbpedia.org/resource/Angela_Merkel",
  "http://dbpedia.org/resource/Hillary_Rodham_Clinton"
}

reasoner.type = "fast instance checker"
reasoner.sources = {sparql}

lp.type = "posNegStandard"
lp.positiveExamples = {"http://dbpedia.org/resource/Angela_Merkel" }
lp.negativeExamples = {"http://dbpedia.org/resource/Hillary_Rodham_Clinton"} 
lp.reasoner = reasoner

// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner

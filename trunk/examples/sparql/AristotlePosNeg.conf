/**
 * Some people from Greece.
 * Note: DBpedia is always subject to change, solutions will change over time

 * Possible Solution:
 *    Theorist OR (Mathematician AND Physicist)
 *
 *  This is the same as AristotlePos.conf, but positives and negatives
 */


// SPARQL options
sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbpedia.org/sparql"
sparql.defaultGraphURIs = {"http://dbpedia.org"}
sparql.recursionDepth = 1
//TODOREFACTOR check if predefinedFilter works at all
//predefined filter (1 = YAGO based learning)
sparql.predefinedFilter = "YAGO"
sparql.instances = {
"http://dbpedia.org/resource/Democritus",
"http://dbpedia.org/resource/Zeno_of_Elea",
"http://dbpedia.org/resource/Plato",
"http://dbpedia.org/resource/Socrates",
"http://dbpedia.org/resource/Archytas",
"http://dbpedia.org/resource/Pythagoras",
"http://dbpedia.org/resource/Philolaus"
}

reasoner.type = "fast instance checker"
reasoner.sources = {sparql}
reasoner.forAllSemantics="SomeOnly"

// we want to learn from positive and negative examples 
lp.type = "posNegStandard"
lp.positiveExamples = {
"http://dbpedia.org/resource/Archytas",
"http://dbpedia.org/resource/Pythagoras",
"http://dbpedia.org/resource/Philolaus"
}
lp.negativeExamples = {
"http://dbpedia.org/resource/Democritus",
"http://dbpedia.org/resource/Zeno_of_Elea",
"http://dbpedia.org/resource/Plato",
"http://dbpedia.org/resource/Socrates"
} 
lp.reasoner = reasoner

// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner


// create a refinement operator and configure it
op.type = "rho"
op.useNegation = false
op.useAllConstructor = false
op.useCardinalityRestrictions = false
op.reasoner = reasoner

lp.positiveExamples = {
 "http://dbpedia.org/resource/Tony_Blair"
,"http://dbpedia.org/resource/Margaret_Thatcher"
,"http://dbpedia.org/resource/John_Major"
, "http://dbpedia.org/resource/Harold_Macmillan"
, "http://dbpedia.org/resource/Alec_Douglas-Home"
}
lp.negativeExamples = {  
"http://dbpedia.org/resource/Gerhard_Schr%C3%B6der"
,"http://dbpedia.org/resource/Helmut_Kohl"
,"http://dbpedia.org/resource/Jacques_Chirac"
, "http://dbpedia.org/resource/Liaquat_Ali_Khan"
} 

// SPARQL options
sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbpedia.openlinksw.com:8890/sparql"
sparql.defaultGraphURIs = {"http://dbpedia.org"}
sparql.recursionDepth = 1
//TODOREFACTOR check if predefinedFilter works at all
sparql.predefinedFilter = "YAGO"
sparql.instances = {
"http://dbpedia.org/resource/Tony_Blair"
,"http://dbpedia.org/resource/Margaret_Thatcher"
,"http://dbpedia.org/resource/John_Major"
,"http://dbpedia.org/resource/Harold_Macmillan"
,"http://dbpedia.org/resource/Alec_Douglas-Home"
,"http://dbpedia.org/resource/Liaquat_Ali_Khan"
,"http://dbpedia.org/resource/Gerhard_Schr%C3%B6der"
,"http://dbpedia.org/resource/Helmut_Kohl"
,"http://dbpedia.org/resource/Jacques_Chirac"
}


reasoner.type = "fast instance checker"
reasoner.sources = {sparql}

lp.type = "posNegStandard"
lp.reasoner = reasoner

// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner
alg.learningProblem = lp
alg.operator = op

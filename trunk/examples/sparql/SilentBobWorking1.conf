
refinement.useAllConstructor = false;
refinement.useExistsConstructor = true;
refinement.useNegation = false;


// recursion depth of extraction algorithm
sparql.recursionDepth = 1;


//predefined filter (1 = YAGO based learning)
// 2 = SKOS, more Options are needed then though. replacePredicate, breakSuperClassRetrievalAfter
sparql.predefinedFilter = 5;

sparql.predefinedEndpoint = 1;


// use DBpedia endpoint
import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL");

// the set of objects as starting point for fragment selection
// (should be identical to the set of examples)
sparql.instances = {
"http://dbpedia.org/resource/Matt_Stone",
"http://dbpedia.org/resource/Sarah_Silverman",
"http://dbpedia.org/resource/Jim_Carrey",
"http://dbpedia.org/resource/Jason_Mewes",
"http://dbpedia.org/resource/Kevin_Smith",
"http://dbpedia.org/resource/Trey_Parker",
"http://dbpedia.org/resource/Adam_Sandler"};



// http://dbpedia.org/class/yago/agnostic OR http://dbpedia.org/class/yago/artist
// http://dbpedia.org/class/yago/agnostic OR http://dbpedia.org/class/yago/teetotaler

+"http://dbpedia.org/resource/Matt_Stone"
+"http://dbpedia.org/resource/Sarah_Silverman"
-"http://dbpedia.org/resource/Jim_Carrey"
-"http://dbpedia.org/resource/Jason_Mewes"
-"http://dbpedia.org/resource/Kevin_Smith"
-"http://dbpedia.org/resource/Trey_Parker"
-"http://dbpedia.org/resource/Adam_Sandler"
/*
 * Some woman, who are politicians.
 *
 * Note: DBpedia is always subject to change. Solutions will change over time.
 *
 * Solution:
 * http://dbpedia.org/class/yago/Executive110069645
 * http://dbpedia.org/class/yago/CorporateExecutive109966255
 * http://dbpedia.org/class/yago/President110468559 
 */

// SPARQL options
sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbpedia.openlinksw.com:8890/sparql"
sparql.defaultGraphURIs = {"http://dbpedia.org"}
sparql.recursionDepth = 1
//TODOREFACTOR check if predefinedFilter works at all
sparql.predefinedFilter = "YAGO"
sparql.instances = {
"http://dbpedia.org/resource/Indira_Gandhi",
"http://dbpedia.org/resource/Sonia_Gandhi",
"http://dbpedia.org/resource/Hillary_Rodham_Clinton",
"http://dbpedia.org/resource/Princess_Leia_Organa",
"http://dbpedia.org/resource/Angela_Merkel",
"http://dbpedia.org/resource/Christine_Todd_Whitman"}


reasoner.type = "fast instance checker"
reasoner.sources = {sparql}

lp.type = "posNegStandard"
lp.positiveExamples = {"http://dbpedia.org/resource/Indira_Gandhi", "http://dbpedia.org/resource/Sonia_Gandhi" }
lp.negativeExamples = {"http://dbpedia.org/resource/Hillary_Rodham_Clinton", "http://dbpedia.org/resource/Princess_Leia_Organa", "http://dbpedia.org/resource/Angela_Merkel", "http://dbpedia.org/resource/Christine_Todd_Whitman"} 
lp.reasoner = reasoner

// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner


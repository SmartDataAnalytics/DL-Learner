/**
 * Some people from Greece.
 * Note: DBpedia is always subject to change, solutions will change over time

 * Possible Solution:
 *    Theorist OR (Mathematician AND Physicist)
 *
 */


// SPARQL options
sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbpedia.openlinksw.com:8890/sparql"
// sparql.url = "http://139.18.2.37:8890/sparql"
//sparql.useCacheDatabase = true;
//sparql.saveExtractedFragment = true;
//predefined filter (1 = YAGO based learning)
//TODOREFACTOR check if predefinedFilter works at all
sparql.predefinedFilter = "YAGO"
sparql.defaultGraphURIs = {"http://dbpedia.org"}
sparql.recursionDepth = 2
sparql.predList = {"http://dbpedia.org/property/wikiPageUsesTemplate","http://www.w3.org/1999/02/22-rdf-syntax-ns#type","http://dbpedia.org/ontology/wikiPageExternalLink","http://dbpedia.org/property/wordnet_type"}
sparql.objList = {"http://dbpedia.org/ontology/","http://dbpedia.org/resource/Category:"}
sparql.useLits = false 
// select a set of "starting instances"
sparql.instances = {
 "http://dbpedia.org/resource/Democritus",
  "http://dbpedia.org/resource/Zeno_of_Elea",
  "http://dbpedia.org/resource/Plato",
  "http://dbpedia.org/resource/Socrates",
  "http://dbpedia.org/resource/Archytas",
  "http://dbpedia.org/resource/Pythagoras",
  "http://dbpedia.org/resource/Philolaus",
  "http://dbpedia.org/resource/Lisa_Gormley",
  "http://dbpedia.org/resource/Jorge_Rivera_%28lawyer%29",
  "http://dbpedia.org/resource/Frederick_Combs",
  "http://dbpedia.org/resource/Kaye_Elhardt",
  "http://dbpedia.org/resource/Saumen_Guha",
  "http://dbpedia.org/resource/Steve_Jaggi",
  "http://dbpedia.org/resource/Moulshree_sachdeva",
  "http://dbpedia.org/resource/Francis_Pollara",
  "http://dbpedia.org/resource/Kelly-Marie_Stewart",
  "http://dbpedia.org/resource/Katie_Crown",
  "http://dbpedia.org/resource/Vijayalalitha",
  "http://dbpedia.org/resource/Joanne_Quintas",
  "http://dbpedia.org/resource/Punit_Malhotra",
  "http://dbpedia.org/resource/Sergio_%28dummy%29",
  "http://dbpedia.org/resource/Pat_Healy_%28actor%29",
  "http://dbpedia.org/resource/Nadine_Van_der_Velde",
  "http://dbpedia.org/resource/Nevin_Bearley"}


reasoner.type = "fast instance checker"
reasoner.sources = {sparql}

lp.type = "posNegStandard"
lp.positiveExamples = {
"http://dbpedia.org/resource/Lisa_Gormley",
"http://dbpedia.org/resource/Jorge_Rivera_%28lawyer%29",
"http://dbpedia.org/resource/Frederick_Combs",
"http://dbpedia.org/resource/Kaye_Elhardt",
"http://dbpedia.org/resource/Saumen_Guha",
"http://dbpedia.org/resource/Steve_Jaggi",
"http://dbpedia.org/resource/Moulshree_sachdeva",
"http://dbpedia.org/resource/Francis_Pollara",
"http://dbpedia.org/resource/Kelly-Marie_Stewart",
"http://dbpedia.org/resource/Katie_Crown",
"http://dbpedia.org/resource/Vijayalalitha",
"http://dbpedia.org/resource/Joanne_Quintas",
"http://dbpedia.org/resource/Punit_Malhotra",
"http://dbpedia.org/resource/Sergio_%28dummy%29",
"http://dbpedia.org/resource/Pat_Healy_%28actor%29",
"http://dbpedia.org/resource/Nadine_Van_der_Velde",
"http://dbpedia.org/resource/Nevin_Bearley" }
lp.negativeExamples = {
"http://dbpedia.org/resource/Pythagoras",
"http://dbpedia.org/resource/Philolaus",
"http://dbpedia.org/resource/Archytas",
"http://dbpedia.org/resource/Socrates",
"http://dbpedia.org/resource/Plato",
"http://dbpedia.org/resource/Zeno_of_Elea",
"http://dbpedia.org/resource/Democritus"
} 
// plug a reasoner into the learning problem
lp.reasoner = reasoner

// create a refinement operator and configure it
op.type = "rho"
op.useNegation = false
op.useAllConstructor = false
op.useCardinalityRestrictions = false
op.useHasValueConstructor = true 
op.reasoner = reasoner

// we use the ocel algorithm
alg.type = "ocel"
alg.reasoner = reasoner
alg.learningProblem = lp
alg.maxExecutionTimeInSeconds = 10
alg.noisePercentage = 15.0 
alg.minExecutionTimeInSeconds = 30  


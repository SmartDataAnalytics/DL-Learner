/**
 * Father Example
 *
 * possible solution: 
 *   male AND EXISTS hasChild.TOP
 *
 * Copyright (C) 2007, Jens Lehmann
 */

/** settings **/
// reasoner settings
reasoner = dig;
//digReasonerURL = "http://localhost:8081";
//useRetrievalForClassification = true;
//refinement.useDIGMultiInstanceChecks = twoChecks;

// algorithm settings
algorithm = refinement;
//refinement.horizontalExpansionFactor = 0.5;
//refinement.quiet = false;

// search tree protocol
// refinement.writeSearchTree = false;
// refinement.searchTreeFile = "log/searchTree.txt";

// control output
cli.checkSatisfiability = true;
cli.showIndividuals = false;
cli.showConcepts = false;
cli.showRoles = true;
cli.showSubsumptionHierarchy = false;

// SPARQL options



sparql2.numberOfRecursions = 2;
sparql2.getAllBackground=true;
sparql2.instances = {"http://dbpedia.org/resource/Angela_Merkel","http://dbpedia.org/resource/Gerhard_Schr%C3%B6der"};
sparql2.format = "N-TRIPLES";
sparql2.dumpToFile = true;


sparql2.predefinedEndpoint=1;
//sparql2.host = "dbpedia.openlinksw.com";


sparql2.predefinedFilter = 1;
//filtermode 1 and above uses a predefined setting
//0 means manual
//sparql2.predList = {};
//sparql2.objList = {};
//sparql2.classList = {};


import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL2");


/** examples **/
+"http://dbpedia.org/resource/Angela_Merkel"
-"http://dbpedia.org/resource/Gerhard_Schr%C3%B6der"
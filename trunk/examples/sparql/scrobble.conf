/**
 * Scroble - analyse the bands of the last songs heard by a user 
 *           (http://dbtune.org/last-fm/$username)
 * 
 * => last FM links to Zitgist which links to MusicBrainz (owl:sameAs), 
 *    so we could obtain the examples 
 * => tags have to be converted to classes for this example to work
 * => negative examples are choosen randomly (in this case we picked them from
 *    recent bands of other users)
 * => in this case the user listened to British Rock and Pop
 * => DL-Learner finds a different, but also correct concept:
 * ("http://dbtune.org/musicbrainz/resource/tag/237" AND ("http://dbtune.org/musicbrainz/resource/tag/7" 
 * OR EXISTS "http://purl.org/vocab/bio/0.1/event"."http://purl.org/vocab/bio/0.1/Death"))
 *
 * UK-Tag AND (Rock-Tag OR EXISTS bioEvent.Death)
 *
 * Note as of 2010/08/04: Example seems to work only sometimes. Often it gets stuck without
 * finding a solution (for no obvious reason).
 *
 */

sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbtune.org/musicbrainz/sparql"
sparql.recursionDepth = 3
sparql.predefinedEndpoint = "MUSICBRAINZ"
sparql.saveExtractedFragment = true
// we transform tags to classes
//TODOREFACTOR not converted correctly
sparql.replacePredicate= [( 
"http://www.holygoat.co.uk/owl/redwood/0.1/tags/taggedWithTag", 
"http://www.w3.org/1999/02/22-rdf-syntax-ns#type" )]


//TODOREFACTOR not found in knowledge base
sparql.instances = {
"http://dbtune.org/musicbrainz/resource/artist/8e3fcd7d-bda1-4ca0-b987-b8528d2ee74e",
"http://dbtune.org/musicbrainz/resource/artist/9a5cf59b-5da0-4021-b885-b6b78dd6886e",
"http://dbtune.org/musicbrainz/resource/artist/79239441-bfd5-4981-a70c-55c3f15c1287",
"http://dbtune.org/musicbrainz/resource/artist/bfcc6d75-a6a5-4bc6-8282-47aec8531818",
"http://dbtune.org/musicbrainz/resource/artist/a10ca116-02af-4989-9a91-fb25585216f7",
"http://dbtune.org/musicbrainz/resource/artist/65e65e77-9bcf-448a-9588-3c03673bb737",
"http://dbtune.org/musicbrainz/resource/artist/db4624cf-0e44-481e-a9dc-2142b833ec2f",
"http://dbtune.org/musicbrainz/resource/artist/b896aa8c-2761-40ce-b485-0e1fffd26167"
}

/*
// some consistency transformation
sparql.replaceObject=[(
"http://dbtune.org/musicbrainz/resource/tag/",
"http://dbtune.org/musicbrainz/resource/tag/tag")];
*/


// some background knowledge about the tags ("semantically enriched tag cloud")
scrobble.type="KB File"
scrobble.url = "scrobble.kb"

reasoner.type = "fast instance checker"
reasoner.sources = {sparql, scrobble}

// learning problem
lp.type = "posNegStandard"
lp.positiveExamples = {
// Genesis
"http://dbtune.org/musicbrainz/resource/artist/8e3fcd7d-bda1-4ca0-b987-b8528d2ee74e",
// IQ
"http://dbtune.org/musicbrainz/resource/artist/9a5cf59b-5da0-4021-b885-b6b78dd6886e",
// Chrildren on Stun
"http://dbtune.org/musicbrainz/resource/artist/65e65e77-9bcf-448a-9588-3c03673bb737",
// Robbie Williams
"http://dbtune.org/musicbrainz/resource/artist/db4624cf-0e44-481e-a9dc-2142b833ec2f",
// Dusty Springfield
"http://dbtune.org/musicbrainz/resource/artist/b896aa8c-2761-40ce-b485-0e1fffd26167"}
lp.negativeExamples = {
// Madonna
"http://dbtune.org/musicbrainz/resource/artist/79239441-bfd5-4981-a70c-55c3f15c1287" ,
// Cher
"http://dbtune.org/musicbrainz/resource/artist/bfcc6d75-a6a5-4bc6-8282-47aec8531818" ,
// Dreadzone
"http://dbtune.org/musicbrainz/resource/artist/a10ca116-02af-4989-9a91-fb25585216f7"
}

// plug a reasoner into the learning problem
lp.reasoner = reasoner

// create a refinement operator and configure it
op.type = "rho"
op.useNegation = false
op.useAllConstructor = false
op.useCardinalityRestrictions = false
op.reasoner = reasoner


ocel.type = "ocel"
ocel.reasoner = reasoner
ocel.learningProblem = lp
ocel.operator = op
ocel.maxExecutionTimeInSeconds = 10
//ocel.writeSearchTree = true
//ocel.searchTreeFile = "log/searchtree.txt"
//ocel.replaceSearchTree = true;












// knowledge source definition
ks1.type = "OWL File"
ks1.url = "http://dbpedia.org/sparql"
ks1.defaultGraphURIs= {"http://dbpedia.org"}
ks1.sparql = " Construct { 	?s1 ?p1 ?o1. 	?o1 ?p2 ?o2 .  	?p1 a owl:ObjectProperty . 	?p2 a owl:ObjectProperty . ?s1 a owl:Thing . ?o1 a owl:Thing . ?o2 a owl:Thing . }  { 	?s1 ?p1 ?o1. 	OPTIONAL{ ?o1 ?p2 ?o2.}	Filter (! (?p1 IN (rdf:type , <http://purl.org/dc/terms/subject>, owl:sameAs, <http://dbpedia.org/ontology/wikiPageExternalLink> ) )) .	Filter (! (?p2 IN (rdf:type , <http://purl.org/dc/terms/subject>, owl:sameAs, <http://dbpedia.org/ontology/wikiPageExternalLink> ) )) .	Filter (!isLiteral(?o1) && !isLiteral(?o2) ) . Filter ( ?s1 IN (<http://dbpedia.org/resource/London> , <http://dbpedia.org/resource/Berlin>)) } "


ks2.type = "OWL File"
ks2.url = "http://dbpedia.org/sparql"
ks2.defaultGraphURIs= {"http://dbpedia.org"}
ks2.sparql = "Construct { ?s1 a ?cl1 . ?s1 a owl:Thing . ?cl1 a owl:Class . ?o2 a ?cl2. ?o2 a owl:Thing . ?cl2 a owl:Class . }   { ?s1 ?p1 ?o1 . OPTIONAL { ?o1 ?p2 ?o2. } Filter (! (?p1 IN (rdf:type , <http://purl.org/dc/terms/subject> ) )) . Filter (! (?p2 IN (rdf:type , <http://purl.org/dc/terms/subject> ) )) . Filter (!isLiteral(?o1) && !isLiteral(?o2) ) . ?s1 a ?cl1 . OPTIONAL {?o2 a ?cl2. } Filter (  ?cl1 LIKE <http://dbpedia.org/ontology/%>  ) . Filter (  ?cl2 LIKE <http://dbpedia.org/ontology/%>  ) . } "

ks2.type = "OWL File"
ks2.url = "http://dbpedia.org/sparql"
ks2.defaultGraphURIs= {"http://dbpedia.org"}
ks2.sparql = "Construct { ?s1 a ?cl1 . ?s1 a owl:Thing . ?cl1 a owl:Class . ?o2 a ?cl2. ?o2 a owl:Thing . ?cl2 a owl:Class . }   { ?s1 ?p1 ?o1 . OPTIONAL { ?o1 ?p2 ?o2. } Filter (! (?p1 IN (rdf:type , <http://purl.org/dc/terms/subject> ) )) . Filter (! (?p2 IN (rdf:type , <http://purl.org/dc/terms/subject> ) )) . Filter (!isLiteral(?o1) && !isLiteral(?o2) ) . ?s1 a ?cl1 . OPTIONAL {?o2 a ?cl2. } Filter (  ?cl1 LIKE <http://dbpedia.org/ontology/%>  ) . Filter (  ?cl2 LIKE <http://dbpedia.org/ontology/%>  ) . } "


reasoner.type = "fast instance checker"
reasoner.sources = {ks1, ks2}

lp.type = "posNegStandard"
lp.positiveExamples = {"http://dbpedia.org/resource/Berlin"}
lp.negativeExamples = {"http://dbpedia.org/resource/London"} 
lp.reasoner = reasoner

// create a refinement operator and configure it
op.type = "rho"
op.useNegation = false
op.useAllConstructor = false
op.useCardinalityRestrictions = false
op.reasoner = reasoner

// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner
alg.learningProblem = lp
alg.operator = op

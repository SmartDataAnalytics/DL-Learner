/**
 * Some people which are/were Prime Ministers of the UK and some random negative Examples.
 * Note: DBpedia is always subject to change, solutions will change over time

 * Possible Solutions:

1: (http://dbpedia.org/class/yago/PrimeMinistersOfTheUnitedKingdom OR EXISTS http://dbpedia.org/property/termStart.TOP) (length 5, depth 3)
2: (http://dbpedia.org/class/yago/LeadersOfTheBritishConservativeParty OR EXISTS http://dbpedia.org/property/termStart.TOP) (length 5, depth 3)

 *
 */

// SPARQL options
sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbpedia.openlinksw.com:8890/sparql"
// sparql.url = "http://139.18.2.37:8890/sparql"

sparql.defaultGraphURIs = {"http://dbpedia.org"}
sparql.recursionDepth = 1
//TODOREFACTOR check if predefinedFilter works at all
sparql.predefinedFilter = "YAGO"
// select a set of "starting instances"
sparql.instances = {
"http://dbpedia.org/resource/Benjamin_Netanyahu"
 ,"http://dbpedia.org/resource/Brant_Brown"
 ,"http://dbpedia.org/resource/David_Blunkett"
 ,"http://dbpedia.org/resource/Democritus"
 ,"http://dbpedia.org/resource/Dick_Grayson"
 ,"http://dbpedia.org/resource/Edward_Marjoribanks%2C_2nd_Baron_Tweedmouth"
 ,"http://dbpedia.org/resource/Elizabeth_Dole"
 ,"http://dbpedia.org/resource/Franklin_Pierce"
 ,"http://dbpedia.org/resource/Kurt_Waldheim"
 ,"http://dbpedia.org/resource/Lamberto_Dini"
 ,"http://dbpedia.org/resource/Laurence_Foley"
 ,"http://dbpedia.org/resource/Philip_Stanhope%2C_4th_Earl_of_Chesterfield"
 ,"http://dbpedia.org/resource/Alec_Douglas-Home"
 ,"http://dbpedia.org/resource/Andrew_Bonar_Law"
 ,"http://dbpedia.org/resource/Anthony_Eden"
 ,"http://dbpedia.org/resource/Anthony_Eden_hat"
 ,"http://dbpedia.org/resource/Archibald_Primrose%2C_5th_Earl_of_Rosebery"
,"http://dbpedia.org/resource/Arthur_Balfour"}



reasoner.type = "fast instance checker"
reasoner.sources = {sparql}

lp.type = "posNegStandard"
lp.negativeExamples = {
"http://dbpedia.org/resource/Benjamin_Netanyahu", 
"http://dbpedia.org/resource/Brant_Brown" ,
"http://dbpedia.org/resource/David_Blunkett" ,
"http://dbpedia.org/resource/Democritus" ,
"http://dbpedia.org/resource/Dick_Grayson" ,
"http://dbpedia.org/resource/Edward_Marjoribanks%2C_2nd_Baron_Tweedmouth" ,
"http://dbpedia.org/resource/Elizabeth_Dole" ,
"http://dbpedia.org/resource/Franklin_Pierce" ,
"http://dbpedia.org/resource/Kurt_Waldheim" ,
"http://dbpedia.org/resource/Lamberto_Dini" ,
"http://dbpedia.org/resource/Laurence_Foley" ,
"http://dbpedia.org/resource/Philip_Stanhope%2C_4th_Earl_of_Chesterfield"}
lp.positiveExamples = {"http://dbpedia.org/resource/Alec_Douglas-Home",
"http://dbpedia.org/resource/Andrew_Bonar_Law",
"http://dbpedia.org/resource/Anthony_Eden",
"http://dbpedia.org/resource/Anthony_Eden_hat",
"http://dbpedia.org/resource/Archibald_Primrose%2C_5th_Earl_of_Rosebery",
"http://dbpedia.org/resource/Arthur_Balfour"}
// plug a reasoner into the learning problem
lp.reasoner = reasoner

// create a refinement operator and configure it
op.type = "rho"
op.useNegation = false
op.useAllConstructor = false
op.useCardinalityRestrictions = false
op.reasoner = reasoner

// we use the ocel algorithm
alg.type = "ocel"
alg.reasoner = reasoner
alg.learningProblem = lp
alg.maxExecutionTimeInSeconds = 10
//alg.ignoredConcepts={"http://dbpedia.org/class/yago/Abstainer109758173"}



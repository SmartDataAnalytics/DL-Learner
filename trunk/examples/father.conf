/**
 * Father Example
 *
 * possible solution: 
 *   male AND EXISTS hasChild.TOP
 *
 * Copyright (C) 2007, Jens Lehmann
 */

/** settings **/
// reasoner settings
reasoner = dig;
digReasonerURL = "http://localhost:8081";
useRetrievalForClassification = true;
refinement.useDIGMultiInstanceChecks = twoChecks;

// algorithm settings
algorithm = refinement;
refinement.horizontalExpansionFactor = 0.5;
refinement.quiet = false;

// search tree protocol
refinement.writeSearchTree = false;
refinement.searchTreeFile = "log/searchTree.txt";

// control output
showIndividuals = true;
showConcepts = true;
showRoles = true;
showInternalKB = true;
showSubsumptionHierarchy = true;

/** background knowledge ***/
BOTTOM = (male AND female).

// persons
male(markus).
male(stefan).
male(heinz).
male(bernd).
female(anna).
female(gabi).
female(michelle).

// children
hasChild(stefan,markus).
hasChild(markus,anna).
hasChild(bernd,gabi).
hasChild(anna,heinz).

/** examples **/
+father(stefan).
+father(markus).
+father(bernd).
-father(heinz).
-father(anna).
-father(gabi).
-father(michelle).

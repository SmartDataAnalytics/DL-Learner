/**
 * Father Example
 *
 * possible solution:
 *   male AND EXISTS hasChild.TOP
 *
 * Copyright (C) 2007, Jens Lehmann
 */

// declare some prefixes to use as abbreviations
prefixes = [ ("ex","http://example.com/father#") ]

// knowledge source definition
ks.type = "OWL File"
ks.fileName = "father.owl"

// reasoner
reasoner.type = "fast instance checker"
reasoner.sources = { ks }

// learning problem
lp.type = "posNegStandard"
lp.positiveExamples = { "ex:stefan", "ex:markus", "ex:martin" }
lp.negativeExamples = { "ex:heinz", "ex:anna", "ex:michelle" }

// create learning algorithm to run
alg.type = "celoe"
alg.maxExecutionTimeInSeconds = 1


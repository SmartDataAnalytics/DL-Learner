/**
 * Some people from Greece.
 * Note: DBpedia is always subject to change, solutions will change over time

 * Possible Solution:
 *    Theorist OR (Mathematician AND Physicist)
 *
 *  This is the same as AristotlePos.conf, but positives and negatives
 */


// SPARQL options
sparql.type = "sparqls"
sparql.endpointURL = "http://live.dbpedia.org/sparql"
sparql.defaultGraphURI = "http://dbpedia.org"
sparql.recursionDepth = 1
sparql.ontologySchemaUrls = {"http://downloads.dbpedia.org/3.6/dbpedia_3.6.owl" }
sparql.tboxfilter =  "FILTER ( regex(str(?class), '^http://dbpedia.org/ontology/') ) .  " 
//sparql.tboxfilter =  "FILTER ( regex(str(?class), LIKE <http://dbpedia.org/ontology/%> ) .  " 

sparql.instances = {
"http://dbpedia.org/resource/Democritus",
"http://dbpedia.org/resource/Zeno_of_Elea",
"http://dbpedia.org/resource/Plato",
"http://dbpedia.org/resource/Socrates",
"http://dbpedia.org/resource/Archytas",
"http://dbpedia.org/resource/Pythagoras",
"http://dbpedia.org/resource/Philolaus"
}

reasoner.type = "fast instance checker"
reasoner.sources = {sparql}


// we want to learn from positive and negative examples 
lp.type = "posNegStandard"
lp.positiveExamples = {
"http://dbpedia.org/resource/Archytas",
"http://dbpedia.org/resource/Pythagoras",
"http://dbpedia.org/resource/Philolaus"
}
lp.negativeExamples = {
"http://dbpedia.org/resource/Democritus",
"http://dbpedia.org/resource/Zeno_of_Elea",
"http://dbpedia.org/resource/Plato",
"http://dbpedia.org/resource/Socrates"
} 
lp.reasoner = reasoner

// create a refinement operator and configure it
op.type = "rho"
op.useNegation = false
op.useAllConstructor = false
op.useCardinalityRestrictions = false
op.reasoner = reasoner

// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner
alg.learningProblem = lp


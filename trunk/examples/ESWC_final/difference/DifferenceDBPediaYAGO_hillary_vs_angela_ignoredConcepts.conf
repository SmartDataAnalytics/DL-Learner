/**

 * Solutions:
http://dbpedia.org/class/yago/Achiever109762821 (length 1, depth 1)
  http://dbpedia.org/class/yago/Intellectual109621545 (length 1, depth 1)
plus all ignored Concepts

  EXISTS http://dbpedia.org/property/almaMater.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/alongside.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/before.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/candidate.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/children.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/dateOfBirth.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/height.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/lawSchool.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/office.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/preceded.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/profession.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/state.TOP (length 3, depth 2)
  EXISTS http://dbpedia.org/property/succeeded.TOP (length 3, depth 2)
  
  Direct classes from DBPedia:
  dbpedia:class/yago/Person100007846 [http]
  dbpedia:class/yago/Entity100001740 [http]
  dbpedia:class/yago/Academician109759069 [http]
  dbpedia:class/yago/Lawyer110249950 [http]
  dbpedia:class/yago/Alumnus109786338 [http]
  dbpedia:class/yago/Woman110787470 [http]
  dbpedia:class/yago/FirstLady110092880 [http]
  dbpedia:class/yago/Politician110451263 [http]
  dbpedia:class/yago/Senator110578471 [http]

 */
refinement.ignoredConcepts = {
"http://dbpedia.org/class/yago/Intellectual109621545",
"http://dbpedia.org/class/yago/Achiever109762821",
"http://dbpedia.org/class/yago/FirstLady110092880",
"http://dbpedia.org/class/yago/Scholar110557854",
"http://dbpedia.org/class/yago/Alumnus109786338",
"http://dbpedia.org/class/yago/Lawgiver110249270",
"http://dbpedia.org/class/yago/Legislator110253995",
"http://dbpedia.org/class/yago/Senator110578471",
"http://dbpedia.org/class/yago/Professional110480253",
"http://dbpedia.org/class/yago/Educator110045713",
"http://dbpedia.org/class/yago/Lawyer110249950",
"http://dbpedia.org/class/yago/Academician109759069"};
 

// recursion depth of extraction algorithm
sparql.recursionDepth = 1;


//predefined filter (1 = YAGO based learning)
// 2 = SKOS, more Options are needed then though. replacePredicate, breakSuperClassRetrievalAfter
sparql.predefinedFilter = 5;

sparql.predefinedEndpoint = 1;


// use DBpedia endpoint
import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL");

// the set of objects as starting point for fragment selection
// (should be identical to the set of examples)
sparql.instances = {
  "http://dbpedia.org/resource/Angela_Merkel",
  "http://dbpedia.org/resource/Hillary_Rodham_Clinton"
};


/** examples **/
+"http://dbpedia.org/resource/Hillary_Rodham_Clinton"
-"http://dbpedia.org/resource/Angela_Merkel"

 /* 




 */

// SPARQL options

import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL2");

refinement.heuristic = flexible;

refinement.useAllConstructor = false;
//refinement.useExistsConstructor = true;
refinement.useNegation = false;

// SPARQL options
//necessary:
sparql2.recursionDepth = 1;


//predefined filter (1 = YAGO based learning)
// 2 = SKOS, more Options are needed then though. replacePredicate, breakSuperClassRetrievalAfter
sparql2.predefinedFilter = 1;


import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL2");

sparql2.instances = {
"http://dbpedia.org/resource/Tony_Blair"
,"http://dbpedia.org/resource/Margaret_Thatcher"
,"http://dbpedia.org/resource/John_Major"


,"http://dbpedia.org/resource/Harold_Macmillan"
,"http://dbpedia.org/resource/Alec_Douglas-Home"
,"http://dbpedia.org/resource/Liaquat_Ali_Khan"

,"http://dbpedia.org/resource/Gerhard_Schr%C3%B6der"
,"http://dbpedia.org/resource/Helmut_Kohl"
,"http://dbpedia.org/resource/Jacques_Chirac"

};



/** examples **/
+"http://dbpedia.org/resource/Tony_Blair"
+"http://dbpedia.org/resource/Margaret_Thatcher"
+"http://dbpedia.org/resource/John_Major"


+"http://dbpedia.org/resource/Harold_Macmillan"
+"http://dbpedia.org/resource/Alec_Douglas-Home"
-"http://dbpedia.org/resource/Liaquat_Ali_Khan"

-"http://dbpedia.org/resource/Gerhard_Schr%C3%B6der"
-"http://dbpedia.org/resource/Helmut_Kohl"
-"http://dbpedia.org/resource/Jacques_Chirac"



// just a collection of options for copy and paste

// control output
showIndividuals = true;
showConcepts = true;
showRoles = true;
showInternalKB = true;
showSubsumptionHierarchy = true;

// do not display http://localhost/foo# in concepts 
// and roles to make the output more readable
hidePrefix("http://localhost/foo#");

// reasoner settings
reasoner = dig;
reasoner = fastInstanceChecker;
digReasonerURL = "http://localhost:8081";
useRetrievalForClassification = true;
refinement.useDIGMultiInstanceChecks = twoChecks;

// algorithm settings
algorithm = refinement;
algorithm = refexamples;
refinement.horizontalExpansionFactor = 0.6;
refinement.quiet = false;
refinement.useTooWeakList = true;
refinement.heuristic = flexible;
percentPerLengthUnit = 0.05;

//learning problems
problem = posOnlyDefinition;

// search tree protocol
refinement.writeSearchTree = false;
refinement.searchTreeFile = "log/SearchTree.txt";
refinement.replaceSearchTree = false;


//dig protocol
writeDIGProtocol = true;
digProtocolFile =  "dig.log";

//knowledgesources
import("someFile.kb");
import("someFile.owl");


// SPARQL options
sparql.recursionDepth = 1;

//predefined filter (1 = YAGO based learning)
sparql.predefinedFilter = 5;
sparql.predefinedEndpoint = 1;

//*********SKOS specific
// replace skos with owl properties
sparql.replacePredicate = [
("http://www.w3.org/2004/02/skos/core#subject","http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
("http://www.w3.org/2004/02/skos/core#broader","http://www.w3.org/2000/01/rdf-schema#subClassOf")];

// because skos is cyclic this stops it 
//manually after retrieving the specified amount of classes
sparql.breakSuperClassRetrievalAfter=200;


import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL");
sparql.instances = {};


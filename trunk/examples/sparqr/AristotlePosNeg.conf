/**
 * Some people from Greece.
 * Note: DBpedia is always subject to change, solutions will change over time

 * Possible Solution:
 *    Theorist OR (Mathematician AND Physicist)
 */


/******************
 * SPARQL options *
 ******************/
// sparql component to use
sparql.type = "sparqls"
// endpoint
sparql.endpointURL = "http://dbpedia.org/sparql"
// default graph uri for the SPARQL queries
sparql.defaultGraphURI = "http://dbpedia.org"
// recursion depth
sparql.recursionDepth = 2
// url(s) of the schema definition of the used ontologies.
sparql.ontologySchemaUrls = {"http://downloads.dbpedia.org/3.6/dbpedia_3.6.owl" }

//SPARQL Filters for the instances. Those filters excludes all literals, and all Catergory instances. Thereto a instance must begin with http://dbpedia.org/Resource
sparql.aboxfilter =  "FILTER ( 
!isLiteral(?o) &&   
!regex(str(?p), 'http://dbpedia.org/property/website') &&   
!regex(str(?p), 'http://dbpedia.org/property/wikipage') &&   
!regex(str(?p), 'http://dbpedia.org/property/wikiPageUsesTemplate')  &&   
!regex(str(?p), 'http://dbpedia.org/property/reference') &&   
!regex(str(?p), 'http://www.w3.org/2004/02/skos/core') &&   
!regex(str(?p), 'http://www.w3.org/2002/07/owl#sameAs') &&   
!regex(str(?p), 'http://xmlns.com/foaf/0.1/') &&   
!regex(str(?p), 'http://dbpedia.org/property/wordnet_type') &&   
!regex(str(?p), 'http://dbpedia.org/property/wikilink')  &&   
regex(str(?o), '^http://dbpedia.org/resource/') &&
!regex(str(?o),'^http://dbpedia.org/resource/Category:') 
)  "
// SPARQL Filters for the classes. With this filter only class in the dbpedia ontology are accepted and at example not from YAGO
sparql.tboxfilter =  "FILTER ( !regex(str(?class), '^http://upload.wikimedia.org/wikipedia') &&
!regex(str(?class), '^http://dbpedia.org/resource/Template') &&
!regex(str(?class), '^http://dbpedia.org/resource/Category:') &&
!regex(str(?class), '^http://umbel.org/umbel/') 
 ) .  " 
 
//A list of the start instances
sparql.instances = {
"http://dbpedia.org/resource/Democritus",
"http://dbpedia.org/resource/Zeno_of_Elea",
"http://dbpedia.org/resource/Plato",
"http://dbpedia.org/resource/Socrates",
"http://dbpedia.org/resource/Archytas",
"http://dbpedia.org/resource/Pythagoras",
"http://dbpedia.org/resource/Archimedes",
"http://dbpedia.org/resource/EuClid",
"http://dbpedia.org/resource/Heraclitus"
}

/********************
 * Reasoner options *
 ********************/
reasoner.type = "fast instance checker"
reasoner.sources = {sparql}
reasoner.forAllSemantics="Standard"

/*****************************
 * Learning problems options *
 *****************************/
// we want to learn from positive and negative examples 
lp.type = "posNegStandard"

//the positives examples
lp.positiveExamples = {
"http://dbpedia.org/resource/Archytas",
"http://dbpedia.org/resource/Pythagoras",
"http://dbpedia.org/resource/Archimedes",
"http://dbpedia.org/resource/Thales"
}

//the negatives examples
lp.negativeExamples = {
"http://dbpedia.org/resource/Democritus",
"http://dbpedia.org/resource/Zeno_of_Elea",
"http://dbpedia.org/resource/Plato",
"http://dbpedia.org/resource/Socrates",
"http://dbpedia.org/resource/EuClid",
"http://dbpedia.org/resource/Heraclitus"
} 
lp.reasoner = reasoner

/*******************************
 * refinement operator options *
 *******************************/

// create a refinement operator and configure it
op.type = "rho"
op.useHasValueConstructor = true 
op.reasoner = reasoner

/***************************
 * learn algorithm options *
 ***************************/
// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner



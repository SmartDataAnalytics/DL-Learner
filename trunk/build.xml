<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="build" name="dl_learner">
	
	<!-- directory settings -->
	<property name="lib_dir" value="lib" />
	<property name="source_dir" value="src/dl-learner" />
	<property name="protege_dir" value="/Programme/Protege_4.0_alpha/plugins" />
	<property name="class_dir" value="classes" />
	
	<property name="php_client_dir" value="src/php-client" />
	<tstamp>
			<format property="today" pattern="yyyy-MM-dd" locale="en" />		
  	</tstamp>	
	<property name="version_dir" value="dllearner-${today}" />
	<property name="release_tmp_dir" value="release/${version_dir}" />
	<property name="release_php_client_tmp_dir" value="release/php-client-${today}" />	
	
	<!-- set up classpath -->
	<path id="classpath">
		<pathelement location="."/>
	    <fileset dir="${lib_dir}">
	        <include name="**/*.jar"/>
	   </fileset>
	</path>
	
	<!-- build target -->
	<target name="full_release" depends="javadoc,build" description="full release, javadoc, scripts">
	</target>
	
	<!-- build target -->
	<target name="build" depends="createScripts" description="fast build including scripts, no javadoc">
		
		<!-- write current build date into Info.java -->
		<echo file="${source_dir}/org/dllearner/Info.java" append="false">
// File is updated automatically when a new version is created
package org.dllearner;

public class Info {
	public static final String build = "${today}";
}
		</echo>		
		
		<!-- compile project into temporary directory -->
		<mkdir dir="classes_tmp"/>		
        <javac destdir="classes_tmp">
            <src path="${source_dir}"/>
            <classpath refid="classpath"/>
        </javac>	
		<mkdir dir="${release_tmp_dir}"/>
		<mkdir dir="${release_tmp_dir}/lib/"/>
        <jar jarfile="${release_tmp_dir}/lib/dllearner.jar">
            <fileset dir="classes_tmp"/>
        </jar> 
		<delete dir="classes_tmp"/>
		
		<!-- copy all other libraries -->
		<copy toDir="${release_tmp_dir}/lib">
			<fileset dir="${lib_dir}" />
		</copy>	
		
		<!-- copy binary files and examples -->
		<copy toDir="${release_tmp_dir}/examples">
			<fileset dir="examples"/>
		</copy>
		<copy toDir="${release_tmp_dir}">
			<fileset dir="bin"/>
		</copy>
		
		<!-- create file containing the build info -->
		<echo file="${release_tmp_dir}/build.txt" append="false">DL-Learner Build ${today}</echo>
		
		<!-- create empty log directory for release -->
		<mkdir dir="${release_tmp_dir}/log" />
		
		<!-- copy documentation excluding developer documentation -->
		<copy toDir="${release_tmp_dir}/doc">
			<fileset dir="doc">
				<exclude name="eclipse/" />
				<exclude name="javadoc/" />
			</fileset>
		</copy>
		
		<!-- create tar.gz files (allows storing whether a file is executable) -->
		<tar longfile="gnu" destfile="dllearner-nosource-${today}.tar.gz" compression="gzip">
		  <!-- extra set for executable files -->	
		  <tarfileset dir="release/" mode="755">
		    <include name="${version_dir}/dllearner" />
		  	<include name="${version_dir}/quickstart" />
		  	<include name="${version_dir}/ws" />
		  </tarfileset>
		  <tarfileset dir="release/">
		    <exclude name="${version_dir}/dllearner"/>
		  	<exclude name="${version_dir}/quickstart" />
		  	<exclude name="${version_dir}/ws" />
		  </tarfileset>
		</tar>
		
		<!-- copy source code -->
		<mkdir dir="${release_tmp_dir}/src/"/>
		<copy toDir="${release_tmp_dir}/src/">
			<fileset dir="${source_dir}" includes="**/*.java,**/*.html,**/*.gif,**/*.jjt,build.xml"/>
		</copy>
		
		<!-- create copy developer documentation -->
		<copy todir="${release_tmp_dir}/doc/eclipse/">
		    <fileset dir="doc/eclipse/"/>
		</copy>		
		<copy todir="${release_tmp_dir}/doc/javadoc/">
		    <fileset dir="doc/javadoc/"/>
		</copy>				
		
		<!-- create backup (= standard build + source code + developer documentation) -->
		<tar longfile="gnu" destfile="dllearner-${today}.tar.gz" compression="gzip">
			<tarfileset dir="release/" mode="755">
			    <include name="${version_dir}/dllearner" />
			  	<include name="${version_dir}/quickstart" />
				<include name="${version_dir}/ws" />
			</tarfileset>
			<tarfileset dir="release/">
			    <exclude name="${version_dir}/dllearner"/>
			  	<exclude name="${version_dir}/quickstart" />
				<exclude name="${version_dir}/ws" />
			</tarfileset>				
		</tar>		
		<delete dir="release"/>		
	</target>
	
	<!-- build PHP client release -->
	<target name="php_client">
		<mkdir dir="${release_php_client_tmp_dir}" />
		
		<!-- copy PHP-client to a temporary directory exluding some files -->
		<copy toDir="${release_php_client_tmp_dir}">
			<fileset dir="${php_client_dir}">
				<exclude name="main.wsdl" />
				<exclude name="*.xsd" />
				<!-- <exclude name="save/" /> -->
			</fileset>
		</copy>
		
		<!-- copy over all owl ontologies in examples directory -->
		<copy toDir="${release_php_client_tmp_dir}/ontologies/" flatten="true">
			<fileset dir="examples" includes="**/*.owl" />
		</copy>
		
		<!-- create release -->
		<tar destfile="php-client-${today}.tar.gz" compression="gzip">
			<tarfileset dir="release" />
		</tar>
		
		<delete dir="release" />
	</target>
	
	<!-- generate JAXWS classes -->
	<target name="wsgen" >
		<path id="wsgen">
			<path refid="classpath"/>
			<path location="${class_dir}"/>
		</path>
		<pathconvert refid="wsgen" property="wsgenpath"/>
		<exec dir="${source_dir}" executable="wsgen">
	    <arg value="-keep"/>
	    <arg value="-verbose"/>
	  	<arg value="-cp"/>
		<arg value="${wsgenpath}"/>
		<arg value="org.dllearner.server.DLLearnerWS"/>  
	  </exec>
	</target>
	
	<!-- generate startup scripts -->
	<target name="createScripts" >
		<path id="addjar">
			<path refid="classpath"/>
			<pathelement location="${lib_dir}/dllearner.jar"/>
		</path>
		<path id="removeprefix"><pathelement location="."/>	</path>
		<pathconvert refid="removeprefix" property="removeprefix" />
		
		<pathconvert refid="addjar" property="pathStringUnix" targetos="unix">
			<map from="${removeprefix}" to="."/>
		</pathconvert>
		<pathconvert refid="addjar" property="pathStringWin" targetos="windows">
			<map from="${removeprefix}" to="."/>
		</pathconvert>

		<echo file="bin/quickstart.bat" message="java -Xmx1024m -cp ${pathStringWin} org.dllearner.cli.QuickStart"/>
		<echo file="bin/dllearner.bat" message="java -Xmx1024m -cp ${pathStringWin} org.dllearner.cli.Start %*"/>
		<echo file="bin/ws.bat" message="java -cp ${pathStringWin} org.dllearner.server.DLLearnerWSStart  %*"/>
		<echo file="bin/quickstart" message="java -cp ${pathStringUnix} org.dllearner.cli.QuickStart"/>
		<echo file="bin/dllearner" message="java -cp ${pathStringUnix} org.dllearner.cli.Start $@"/>
		<echo file="bin/ws" message="java -cp ${pathStringUnix}  org.dllearner.server.DLLearnerWSStart $@"/>
	</target>
	
	<!-- generate Javadoc -->
    <target name="javadoc">
    	<pathconvert refid="classpath" property="jdocclasspath"/>
        <javadoc access="public"
        	author="true" 
        	classpath="${jdocclasspath};${java.home}/../lib/tools.jar"
        	destdir="doc/javadoc" 
        	doctitle="DL-Learner Javadoc" 
        	nodeprecated="false" 
        	nodeprecatedlist="false" 
        	noindex="false" 
        	nonavbar="false" 
        	notree="false" 
        	overview="src/dl-learner/overview.html" 
        	source="1.6" 
        	sourcepath="src/dl-learner" 
        	splitindex="true" 
        	stylesheetfile="javadoc.css" 
        	use="true" 
        	version="true"
        	linksource="true" 
        	bottom="&lt;img style='float:right' src='http://sflogo.sourceforge.net/sflogo.php?group_id=203619&amp;type=1' width='88' height='31' border='0' alt='SourceForge.net Logo' /&gt; DL-Learner is licenced under the terms of the GNU General Public License.&lt;br /&gt;Copyright &amp;#169; 2007 Jens Lehmann" 
        	Encoding="ISO-8859-1" 
        	windowtitle="DL-Learner Javadoc">
        	<taglet name="org.dllearner.utilities.ToDoTaglet" path="classes" />
        	<link href="http://java.sun.com/javase/6/docs/api/"/>
    	</javadoc>
    </target>	
	
	<!-- build protege plugin and copy it to the plugin folder -->
	<target name="protege">
	<property name="source" value="src/dl-learner/org/dllearner/tools/protege" />
	<property name="temp" value="${source}/temp" />
		
    	<mkdir dir="${temp}" />
    	<mkdir dir="${temp}/META-INF" />
		<mkdir dir="${temp}/lib" />
		<mkdir dir="${temp}/lib/pellet" />
		<mkdir dir="${temp}/lib/jena" />
		<copy toDir="${temp}/META-INF" >
		    		<fileset dir="${source}/META-INF" includes="MANIFEST.MF," />	
		</copy>
		<copy toDir="${temp}/lib" >
				    		<fileset dir="${lib_dir}" includes="junit-4.4.jar" />
				</copy>
		<copy toDir="${temp}/lib/pellet" >
							    	<fileset dir="${lib_dir}/pellet" includes="pellet.jar,aterm-java-1.6.jar,relaxngDatatype.jar,xsdlib.jar" />	
					</copy>
		<copy toDir="${temp}/lib/jena" >
							    	<fileset dir="${lib_dir}/jena" includes="commons-logging-1.1.jar" />	
					</copy>
			<copy toDir="${temp}" >
					    	<fileset dir="${class_dir}"  />	
			</copy>
		<copy toDir="${temp}" >
			<fileset dir="${source}/META-INF" includes="**/*.xml," excludes="build.xml" />
			</copy>
    	<javac srcdir="${source}"
         destdir="${temp}"
         classpath="jarfile"
         debug="on" />
    	<jar destfile="${protege_dir}/dl-learner.jar" manifest="${temp}/META-INF/MANIFEST.MF">
    			<fileset dir="${temp}" />
    		</jar>
    	<delete dir="${temp}" />
		
	</target>
	
</project>

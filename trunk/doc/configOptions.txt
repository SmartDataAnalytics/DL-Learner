This file contains an automatically generated files of all components and their config options.

*********************
* Knowledge Sources *
*********************

component: KB file (org.dllearner.kb.KBFile)
============================================

CLI usage: import ("$url",  "null");

option name: url
description: URL pointer to the KB file
values: class org.dllearner.core.options.URLConfigOption
default value: null
CLI usage: null.url = null;


component: OWL API Ontology (org.dllearner.kb.OWLAPIOntology)
=============================================================

CLI usage: import ("$url",  "null");


component: OWL file (org.dllearner.kb.OWLFile)
==============================================

CLI usage: import ("$url",  "owlfile");

option name: url
description: URL pointing to the OWL file
values: class org.dllearner.core.options.URLConfigOption
default value: null
CLI usage: owlfile.url = null;


component: SPARQL Endpoint (org.dllearner.kb.sparql.SparqlKnowledgeSource)
==========================================================================

CLI usage: import ("$url",  "sparql");

option name: url
description: URL of SPARQL Endpoint
values: class org.dllearner.core.options.URLConfigOption
default value: null
CLI usage: sparql.url = null;

option name: cacheDir
description: dir of cache
values: class org.dllearner.core.options.StringConfigOption
default value: cache
CLI usage: sparql.cacheDir = cache;

option name: useCache
description: If true a Cache is used
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: sparql.useCache = true;

option name: instances
description: relevant instances e.g. positive and negative examples in a learning problem
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: sparql.instances = null;

option name: recursionDepth
description: recursion depth of KB fragment selection
values: class org.dllearner.core.options.IntegerConfigOption
default value: 1
CLI usage: sparql.recursionDepth = 1;

option name: predefinedFilter
description: the mode of the SPARQL Filter, use one of YAGO,SKOS,YAGOSKOS , YAGOSPECIALHIERARCHY, TEST
values: class org.dllearner.core.options.StringConfigOption
default value: null
CLI usage: sparql.predefinedFilter = null;

option name: predefinedEndpoint
description: the mode of the SPARQL Filter, use one of DBPEDIA, LOCAL, GOVTRACK, REVYU, MYOPENLINK, FACTBOOK
values: class org.dllearner.core.options.StringConfigOption
default value: null
CLI usage: sparql.predefinedEndpoint = null;

option name: predefinedManipulator
description: the mode of the Manipulator, use one of STANDARD, DBPEDIA-NAVIGATOR
values: class org.dllearner.core.options.StringConfigOption
default value: null
CLI usage: sparql.predefinedManipulator = null;

option name: predList
description: list of all ignored roles
values: class org.dllearner.core.options.StringSetConfigOption
default value: []
CLI usage: sparql.predList = [];

option name: objList
description: list of all ignored objects
values: class org.dllearner.core.options.StringSetConfigOption
default value: []
CLI usage: sparql.objList = [];

option name: saveExtractedFragment
description: Specifies whether the extracted ontology is written to a file or not. The OWL file is written to the cache dir.Some DBpedia URI will make the XML invalid
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: sparql.saveExtractedFragment = false;

option name: replacePredicate
description: rule for replacing predicates
values: class org.dllearner.core.options.StringTupleListConfigOption
default value: []
CLI usage: sparql.replacePredicate = [];

option name: replaceObject
description: rule for replacing predicates
values: class org.dllearner.core.options.StringTupleListConfigOption
default value: []
CLI usage: sparql.replaceObject = [];

option name: breakSuperClassRetrievalAfter
description: stops a cyclic hierarchy after specified number of classes
values: class org.dllearner.core.options.IntegerConfigOption
default value: 1000
CLI usage: sparql.breakSuperClassRetrievalAfter = 1000;

option name: useLits
description: use Literals in SPARQL query
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: sparql.useLits = true;

option name: getAllSuperClasses
description: If true then all superclasses are retrieved until the most general class (owl:Thing) is reached.
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: sparql.getAllSuperClasses = true;

option name: closeAfterRecursion
description: gets all classes for all instances
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: sparql.closeAfterRecursion = true;

option name: getPropertyInformation
description: gets all types for extracted ObjectProperties
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: sparql.getPropertyInformation = false;

option name: dissolveBlankNodes
description: determines whether Blanknodes are dissolved. This is a costly function.
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: sparql.dissolveBlankNodes = true;

option name: useImprovedSparqlTupelAquisitor
description: uses deeply nested SparqlQueries, according to recursion depth, still EXPERIMENTAL
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: sparql.useImprovedSparqlTupelAquisitor = false;

option name: verbosity
description: control verbosity of output for this component
values: class org.dllearner.core.options.StringConfigOption
default value: warning
CLI usage: sparql.verbosity = warning;

option name: defaultGraphURIs
description: a list of all default Graph URIs
values: class org.dllearner.core.options.StringSetConfigOption
default value: []
CLI usage: sparql.defaultGraphURIs = [];

option name: namedGraphURIs
description: a list of all named Graph URIs
values: class org.dllearner.core.options.StringSetConfigOption
default value: []
CLI usage: sparql.namedGraphURIs = [];


*************
* Reasoners *
*************

component: DIG reasoner (org.dllearner.reasoning.DIGReasoner)
=============================================================

CLI usage: reasoner = digReasoner;

option name: reasonerUrl
description: URL of the DIG reasoner
values: class org.dllearner.core.options.StringConfigOption
default value: null
CLI usage: digReasoner.reasonerUrl = null;

option name: writeDIGProtocol
description: specifies whether or not to write a protocoll of send and received DIG requests
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: digReasoner.writeDIGProtocol = false;

option name: digProtocolFile
description: the file to store the DIG protocol
values: class org.dllearner.core.options.StringConfigOption
default value: log/digProtocol.txt
CLI usage: digReasoner.digProtocolFile = log/digProtocol.txt;


component: fast instance checker (org.dllearner.reasoning.FastInstanceChecker)
==============================================================================

CLI usage: reasoner = fastInstanceChecker;

option name: reasonerType
description: FaCT++ or Pellet to dematerialize
values: class org.dllearner.core.options.StringConfigOption
default value: pellet
CLI usage: fastInstanceChecker.reasonerType = pellet;

option name: defaultNegation
description: Whether to use default negation, i.e. an instance not being in a class means that it is in the negation of the class.
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: fastInstanceChecker.defaultNegation = true;

option name: forallRetrievalSemantics
description: This option controls how to interpret the all quantifier in orall r.C. The standard option isto return all those which do not have an r-filler not in C. The domain semantics is to use thosewhich are in the domain of r and do not have an r-filler not in C. The forallExists semantics is touse those which have at least one r-filler and do not have an r-filler not in C.
values: class org.dllearner.core.options.StringConfigOption
default value: forallExists
CLI usage: fastInstanceChecker.forallRetrievalSemantics = forallExists;


component: fast retrieval reasoner (org.dllearner.reasoning.FastRetrievalReasoner)
==================================================================================

CLI usage: reasoner = fastRetrievalReasoner;


component: OWL API reasoner (org.dllearner.reasoning.OWLAPIReasoner)
====================================================================

CLI usage: reasoner = owlAPIReasoner;

option name: reasonerType
description: FaCT++ or Pellet, which means "pellet" or "fact"
values: class org.dllearner.core.options.StringConfigOption
default value: pellet
CLI usage: owlAPIReasoner.reasonerType = pellet;


*********************
* Learning Problems *
*********************

component: unnamed component (org.dllearner.learningproblems.ClassLearningProblem)
==================================================================================

CLI usage: problem = classLearning;

option name: classToDescribe
description: class of which a description should be learned
values: class org.dllearner.core.options.StringConfigOption
default value: null
CLI usage: classLearning.classToDescribe = null;

option name: type
description: Whether to learn an equivalence class or super class axiom.
values: class org.dllearner.core.options.StringConfigOption
default value: equivalence
CLI usage: classLearning.type = equivalence;


component: two valued inclusion learning problem (org.dllearner.learningproblems.PosNegInclusionLP)
===================================================================================================

CLI usage: problem = posNegInclusionLP;

option name: positiveExamples
description: positive examples
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: posNegInclusionLP.positiveExamples = null;

option name: negativeExamples
description: negative examples
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: posNegInclusionLP.negativeExamples = null;

option name: useRetrievalForClassficiation
description: Specifies whether to use retrieval or instance checks for testing a concept.
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: posNegInclusionLP.useRetrievalForClassficiation = false;

option name: percentPerLenghtUnit
description: describes the reduction in classification accuracy in percent one is willing to accept for reducing the length of the concept by one
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.05
CLI usage: posNegInclusionLP.percentPerLenghtUnit = 0.05;

option name: useMultiInstanceChecks
description: See UseMultiInstanceChecks enum.
values: class org.dllearner.core.options.StringConfigOption
default value: twoChecks
CLI usage: posNegInclusionLP.useMultiInstanceChecks = twoChecks;


component: two valued definition learning problem (org.dllearner.learningproblems.PosNegLPStandard)
===================================================================================================

CLI usage: problem = posNegDefinitionLP;

option name: positiveExamples
description: positive examples
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: posNegDefinitionLP.positiveExamples = null;

option name: negativeExamples
description: negative examples
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: posNegDefinitionLP.negativeExamples = null;

option name: useRetrievalForClassficiation
description: Specifies whether to use retrieval or instance checks for testing a concept.
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: posNegDefinitionLP.useRetrievalForClassficiation = false;

option name: percentPerLenghtUnit
description: describes the reduction in classification accuracy in percent one is willing to accept for reducing the length of the concept by one
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.05
CLI usage: posNegDefinitionLP.percentPerLenghtUnit = 0.05;

option name: useMultiInstanceChecks
description: See UseMultiInstanceChecks enum.
values: class org.dllearner.core.options.StringConfigOption
default value: twoChecks
CLI usage: posNegDefinitionLP.useMultiInstanceChecks = twoChecks;


component: three valued definition learning problem (org.dllearner.learningproblems.PosNegLPStrict)
===================================================================================================

CLI usage: problem = posNegDefinitionLPStrict;

option name: positiveExamples
description: positive examples
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: posNegDefinitionLPStrict.positiveExamples = null;

option name: negativeExamples
description: negative examples
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: posNegDefinitionLPStrict.negativeExamples = null;

option name: useRetrievalForClassficiation
description: Specifies whether to use retrieval or instance checks for testing a concept.
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: posNegDefinitionLPStrict.useRetrievalForClassficiation = false;

option name: percentPerLenghtUnit
description: describes the reduction in classification accuracy in percent one is willing to accept for reducing the length of the concept by one
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.05
CLI usage: posNegDefinitionLPStrict.percentPerLenghtUnit = 0.05;

option name: useMultiInstanceChecks
description: See UseMultiInstanceChecks enum.
values: class org.dllearner.core.options.StringConfigOption
default value: twoChecks
CLI usage: posNegDefinitionLPStrict.useMultiInstanceChecks = twoChecks;

option name: penaliseNeutralExamples
description: if set to true neutral examples are penalised
values: class org.dllearner.core.options.BooleanConfigOption
default value: null
CLI usage: posNegDefinitionLPStrict.penaliseNeutralExamples = null;

option name: accuracyPenalty
description: penalty for pos/neg examples which are classified as neutral
values: class org.dllearner.core.options.DoubleConfigOption
default value: 1.0
CLI usage: posNegDefinitionLPStrict.accuracyPenalty = 1.0;

option name: errorPenalty
description: penalty for pos. examples classified as negative or vice versa
values: class org.dllearner.core.options.DoubleConfigOption
default value: 3.0
CLI usage: posNegDefinitionLPStrict.errorPenalty = 3.0;


component: positive only definition learning problem (org.dllearner.learningproblems.PosOnlyLP)
===============================================================================================

CLI usage: problem = null;

option name: positiveExamples
description: positive examples
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: null.positiveExamples = null;


***********************
* Learning Algorithms *
***********************

component: brute force learning algorithm (org.dllearner.algorithms.BruteForceLearner)
======================================================================================

CLI usage: algorithm = bruteForce;

option name: maxLength
description: maximum length of generated concepts
values: class org.dllearner.core.options.IntegerConfigOption
default value: 7
CLI usage: bruteForce.maxLength = 7;

option name: returnType
description: Specifies the type which the solution has to belong to (if already) known. This means we inform the learning algorithm that the solution is a subclass of this type.
values: class org.dllearner.core.options.StringConfigOption
default value: null
CLI usage: bruteForce.returnType = null;


component: random guesser learning algorithm (org.dllearner.algorithms.RandomGuesser)
=====================================================================================

CLI usage: algorithm = random;

option name: numberOfTrees
description: number of randomly generated concepts/trees
values: class org.dllearner.core.options.IntegerConfigOption
default value: 5
CLI usage: random.numberOfTrees = 5;

option name: maxDepth
description: maximum depth of generated concepts/trees
values: class org.dllearner.core.options.IntegerConfigOption
default value: 5
CLI usage: random.maxDepth = 5;


component: CELOE (org.dllearner.algorithms.celoe.CELOE)
=======================================================

CLI usage: algorithm = celoe;

option name: useAllConstructor
description: specifies whether the universal concept constructor is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: celoe.useAllConstructor = true;

option name: useExistsConstructor
description: specifies whether the existential concept constructor is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: celoe.useExistsConstructor = true;

option name: useHasValueConstructor
description: specifies whether the hasValue constructor is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: celoe.useHasValueConstructor = false;

option name: valueFrequencyThreshold
description: specifies how often an object must occur as value in order to be considered for hasValue restrictions
values: class org.dllearner.core.options.IntegerConfigOption
default value: 3
CLI usage: celoe.valueFrequencyThreshold = 3;

option name: useCardinalityRestrictions
description: specifies whether CardinalityRestrictions is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: celoe.useCardinalityRestrictions = true;

option name: cardinalityLimit
description: Gives the maximum number used in cardinality restrictions.
values: class org.dllearner.core.options.IntegerConfigOption
default value: 5
CLI usage: celoe.cardinalityLimit = 5;

option name: useNegation
description: specifies whether negation is used in the learning algorothm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: celoe.useNegation = true;

option name: useBooleanDatatypes
description: specifies whether boolean datatypes are used in the learning algorothm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: celoe.useBooleanDatatypes = true;

option name: useDoubleDatatypes
description: specifies whether boolean datatypes are used in the learning algorothm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: celoe.useDoubleDatatypes = true;

option name: maxExecutionTimeInSeconds
description: algorithm will stop after specified seconds
values: class org.dllearner.core.options.IntegerConfigOption
default value: 10
CLI usage: celoe.maxExecutionTimeInSeconds = 10;

option name: noisePercentage
description: the (approximated) percentage of noise within the examples
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 100.0
default value: 0.0
CLI usage: celoe.noisePercentage = 0.0;

option name: maxDepth
description: maximum depth of description
values: class org.dllearner.core.options.IntegerConfigOption
default value: 4
CLI usage: celoe.maxDepth = 4;


component: standard EL learning algorithm (org.dllearner.algorithms.el.ELLearningAlgorithm)
===========================================================================================

CLI usage: algorithm = el;


component: genetic programming learning algorithm (org.dllearner.algorithms.gp.GP)
==================================================================================

CLI usage: algorithm = gp;

option name: selectionType
description: selection type
values: class org.dllearner.core.options.StringConfigOption
default value: rankSelection
CLI usage: gp.selectionType = rankSelection;

option name: tournamentSize
description: tournament size (applies only to tournament selection)
values: class org.dllearner.core.options.IntegerConfigOption min 2 max 20
default value: 3
CLI usage: gp.tournamentSize = 3;

option name: elitism
description: specifies whether to use elitism in selection
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: gp.elitism = true;

option name: algorithmType
description: algorithm type
values: class org.dllearner.core.options.StringConfigOption
default value: steadyState
CLI usage: gp.algorithmType = steadyState;

option name: mutationProbability
description: mutation probability
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.03
CLI usage: gp.mutationProbability = 0.03;

option name: crossoverProbability
description: crossover probability
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.95
CLI usage: gp.crossoverProbability = 0.95;

option name: hillClimbingProbability
description: hill climbing probability
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.0
CLI usage: gp.hillClimbingProbability = 0.0;

option name: refinementProbability
description: refinement operator probability (values higher than 0 turn this into a hybrid GP algorithm - see publication)
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.0
CLI usage: gp.refinementProbability = 0.0;

option name: numberOfIndividuals
description: number of individuals
values: class org.dllearner.core.options.IntegerConfigOption min 1
default value: 100
CLI usage: gp.numberOfIndividuals = 100;

option name: numberOfSelectedIndividuals
description: number of selected individuals
values: class org.dllearner.core.options.IntegerConfigOption min 1
default value: 92
CLI usage: gp.numberOfSelectedIndividuals = 92;

option name: useFixedNumberOfGenerations
description: specifies whether to use a fixed number of generations
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: gp.useFixedNumberOfGenerations = false;

option name: generations
description: number of generations (only valid if a fixed number of generations is used)
values: class org.dllearner.core.options.IntegerConfigOption min 1
default value: 20
CLI usage: gp.generations = 20;

option name: postConvergenceGenerations
description: number of generations after which to stop if no improvement wrt. the best solution has been achieved
values: class org.dllearner.core.options.IntegerConfigOption min 1
default value: 50
CLI usage: gp.postConvergenceGenerations = 50;

option name: adc
description: whether to use automatically defined concept (this invents new helper concepts, but enlarges the search space
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: gp.adc = false;

option name: initMinDepth
description: minimum depth to use when creating the initial population
values: class org.dllearner.core.options.IntegerConfigOption min 1
default value: 4
CLI usage: gp.initMinDepth = 4;

option name: initMaxDepth
description: maximum depth to use when creating the initial population
values: class org.dllearner.core.options.IntegerConfigOption min 1
default value: 6
CLI usage: gp.initMaxDepth = 6;

option name: maxConceptLength
description: maximum concept length (higher length means lowest possible fitness)
values: class org.dllearner.core.options.IntegerConfigOption min 1
default value: 75
CLI usage: gp.maxConceptLength = 75;


component: refinement operator based learning algorithm (org.dllearner.algorithms.refinement.ROLearner)
=======================================================================================================

CLI usage: algorithm = refinement;

option name: writeSearchTree
description: specifies whether to write a search tree
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: refinement.writeSearchTree = false;

option name: searchTreeFile
description: file to use for the search tree
values: class org.dllearner.core.options.StringConfigOption
default value: log/searchTree.txt
CLI usage: refinement.searchTreeFile = log/searchTree.txt;

option name: replaceSearchTree
description: specifies whether to replace the search tree in the log file after each run or append the new search tree
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: refinement.replaceSearchTree = false;

option name: heuristic
description: specifiy the heuristic to use
values: class org.dllearner.core.options.StringConfigOption
default value: lexicographic
CLI usage: refinement.heuristic = lexicographic;

option name: applyAllFilter
description: usage of equivalence ALL R.C AND ALL R.D = ALL R.(C AND D)
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.applyAllFilter = true;

option name: applyExistsFilter
description: usage of equivalence EXISTS R.C OR EXISTS R.D = EXISTS R.(C OR D)
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.applyExistsFilter = true;

option name: useTooWeakList
description: try to filter out too weak concepts without sending them to the reasoner
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.useTooWeakList = true;

option name: useOverlyGeneralList
description: try to find overly general concept without sending them to the reasoner
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.useOverlyGeneralList = true;

option name: useShortConceptConstruction
description: shorten concept to see whether they already exist
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.useShortConceptConstruction = true;

option name: horizontalExpansionFactor
description: horizontal expansion factor (see publication for description)
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.6
CLI usage: refinement.horizontalExpansionFactor = 0.6;

option name: improveSubsumptionHierarchy
description: simplify subsumption hierarchy to reduce search space (see publication for description)
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.improveSubsumptionHierarchy = true;

option name: quiet
description: may be deprecated soon
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: refinement.quiet = false;

option name: allowedConcepts
description: concepts the algorithm is allowed to use
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: refinement.allowedConcepts = null;

option name: ignoredConcepts
description: concepts the algorithm must ignore
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: refinement.ignoredConcepts = null;

option name: allowedRoles
description: roles the algorithm is allowed to use
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: refinement.allowedRoles = null;

option name: ignoredRoles
description: roles the algorithm must ignore
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: refinement.ignoredRoles = null;

option name: useAllConstructor
description: specifies whether the universal concept constructor is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.useAllConstructor = true;

option name: useExistsConstructor
description: specifies whether the existential concept constructor is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.useExistsConstructor = true;

option name: useNegation
description: specifies whether negation is used in the learning algorothm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.useNegation = true;

option name: useCardinalityRestrictions
description: specifies whether CardinalityRestrictions is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.useCardinalityRestrictions = true;

option name: useBooleanDatatypes
description: specifies whether boolean datatypes are used in the learning algorothm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refinement.useBooleanDatatypes = true;

option name: maxExecutionTimeInSeconds
description: algorithm will stop after specified seconds
values: class org.dllearner.core.options.IntegerConfigOption
default value: 0
CLI usage: refinement.maxExecutionTimeInSeconds = 0;

option name: minExecutionTimeInSeconds
description: algorithm will run at least specified seconds
values: class org.dllearner.core.options.IntegerConfigOption
default value: 0
CLI usage: refinement.minExecutionTimeInSeconds = 0;

option name: guaranteeXgoodDescriptions
description: algorithm will run until X good (100%) concept descritpions are found
values: class org.dllearner.core.options.IntegerConfigOption
default value: 1
CLI usage: refinement.guaranteeXgoodDescriptions = 1;

option name: logLevel
description: determines the logLevel for this component, can be {TRACE, DEBUG, INFO}
values: class org.dllearner.core.options.StringConfigOption
default value: DEBUG
CLI usage: refinement.logLevel = DEBUG;


component: refinement operator based learning algorithm II (org.dllearner.algorithms.refinement2.ROLComponent2)
===============================================================================================================

CLI usage: algorithm = refexamples;

option name: writeSearchTree
description: specifies whether to write a search tree
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: refexamples.writeSearchTree = false;

option name: searchTreeFile
description: file to use for the search tree
values: class org.dllearner.core.options.StringConfigOption
default value: log/searchTree.txt
CLI usage: refexamples.searchTreeFile = log/searchTree.txt;

option name: replaceSearchTree
description: specifies whether to replace the search tree in the log file after each run or append the new search tree
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: refexamples.replaceSearchTree = false;

option name: heuristic
description: specifiy the heuristic to use
values: class org.dllearner.core.options.StringConfigOption
default value: lexicographic
CLI usage: refexamples.heuristic = lexicographic;

option name: applyAllFilter
description: usage of equivalence ALL R.C AND ALL R.D = ALL R.(C AND D)
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.applyAllFilter = true;

option name: applyExistsFilter
description: usage of equivalence EXISTS R.C OR EXISTS R.D = EXISTS R.(C OR D)
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.applyExistsFilter = true;

option name: useTooWeakList
description: try to filter out too weak concepts without sending them to the reasoner
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useTooWeakList = true;

option name: useOverlyGeneralList
description: try to find overly general concept without sending them to the reasoner
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useOverlyGeneralList = true;

option name: useShortConceptConstruction
description: shorten concept to see whether they already exist
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useShortConceptConstruction = true;

option name: horizontalExpansionFactor
description: horizontal expansion factor (see publication for description)
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 1.0
default value: 0.6
CLI usage: refexamples.horizontalExpansionFactor = 0.6;

option name: improveSubsumptionHierarchy
description: simplify subsumption hierarchy to reduce search space (see publication for description)
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.improveSubsumptionHierarchy = true;

option name: allowedConcepts
description: concepts the algorithm is allowed to use
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: refexamples.allowedConcepts = null;

option name: ignoredConcepts
description: concepts the algorithm must ignore
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: refexamples.ignoredConcepts = null;

option name: allowedRoles
description: roles the algorithm is allowed to use
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: refexamples.allowedRoles = null;

option name: ignoredRoles
description: roles the algorithm must ignore
values: class org.dllearner.core.options.StringSetConfigOption
default value: null
CLI usage: refexamples.ignoredRoles = null;

option name: useAllConstructor
description: specifies whether the universal concept constructor is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useAllConstructor = true;

option name: useExistsConstructor
description: specifies whether the existential concept constructor is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useExistsConstructor = true;

option name: useHasValueConstructor
description: specifies whether the hasValue constructor is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: refexamples.useHasValueConstructor = false;

option name: valueFrequencyThreshold
description: specifies how often an object must occur as value in order to be considered for hasValue restrictions
values: class org.dllearner.core.options.IntegerConfigOption
default value: 3
CLI usage: refexamples.valueFrequencyThreshold = 3;

option name: useCardinalityRestrictions
description: specifies whether CardinalityRestrictions is used in the learning algorithm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useCardinalityRestrictions = true;

option name: cardinalityLimit
description: Gives the maximum number used in cardinality restrictions.
values: class org.dllearner.core.options.IntegerConfigOption
default value: 5
CLI usage: refexamples.cardinalityLimit = 5;

option name: useNegation
description: specifies whether negation is used in the learning algorothm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useNegation = true;

option name: useBooleanDatatypes
description: specifies whether boolean datatypes are used in the learning algorothm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useBooleanDatatypes = true;

option name: useDoubleDatatypes
description: specifies whether boolean datatypes are used in the learning algorothm
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.useDoubleDatatypes = true;

option name: maxExecutionTimeInSeconds
description: algorithm will stop after specified seconds
values: class org.dllearner.core.options.IntegerConfigOption
default value: 0
CLI usage: refexamples.maxExecutionTimeInSeconds = 0;

option name: minExecutionTimeInSeconds
description: algorithm will run at least specified seconds
values: class org.dllearner.core.options.IntegerConfigOption
default value: 0
CLI usage: refexamples.minExecutionTimeInSeconds = 0;

option name: guaranteeXgoodDescriptions
description: algorithm will run until X good (100%) concept descritpions are found
values: class org.dllearner.core.options.IntegerConfigOption
default value: 1
CLI usage: refexamples.guaranteeXgoodDescriptions = 1;

option name: maxClassDescriptionTests
description: The maximum number of candidate hypothesis the algorithm is allowed to test (0 = no limit). The algorithm will stop afterwards. (The real number of tests can be slightly higher, because this criterion usually won't be checked after each single test.)
values: class org.dllearner.core.options.IntegerConfigOption
default value: 0
CLI usage: refexamples.maxClassDescriptionTests = 0;

option name: logLevel
description: determines the logLevel for this component, can be {TRACE, DEBUG, INFO}
values: class org.dllearner.core.options.StringConfigOption
default value: DEBUG
CLI usage: refexamples.logLevel = DEBUG;

option name: usePropernessChecks
description: specifies whether to check for equivalence (i.e. discard equivalent refinements)
values: class org.dllearner.core.options.BooleanConfigOption
default value: false
CLI usage: refexamples.usePropernessChecks = false;

option name: maxPosOnlyExpansion
description: specifies how often a node in the search tree of a posonly learning problem needs to be expanded before it is considered as solution candidate
values: class org.dllearner.core.options.IntegerConfigOption
default value: 4
CLI usage: refexamples.maxPosOnlyExpansion = 4;

option name: noisePercentage
description: the (approximated) percentage of noise within the examples
values: class org.dllearner.core.options.DoubleConfigOption min 0.0 max 100.0
default value: 0.0
CLI usage: refexamples.noisePercentage = 0.0;

option name: terminateOnNoiseReached
description: specifies whether to terminate when noise criterion is met
values: class org.dllearner.core.options.BooleanConfigOption
default value: true
CLI usage: refexamples.terminateOnNoiseReached = true;

option name: startClass
description: the named class which should be used to start the algorithm (GUI: needs a widget for selecting a class)
values: class org.dllearner.core.options.StringConfigOption
default value: null
CLI usage: refexamples.startClass = null;

option name: forceRefinementLengthIncrease
description: specifies whether nodes should be expanded until only longer refinements are reached
values: class org.dllearner.core.options.BooleanConfigOption
default value: null
CLI usage: refexamples.forceRefinementLengthIncrease = null;

option name: negativeWeight
description: Used to penalise errors on negative examples different from those of positive examples (lower = less importance for negatives).
values: class org.dllearner.core.options.DoubleConfigOption
default value: 1.0
CLI usage: refexamples.negativeWeight = 1.0;

option name: startNodeBonus
description: You can use this to give a heuristic bonus on the start node (= initially broader exploration of search space).
values: class org.dllearner.core.options.DoubleConfigOption
default value: 0.0
CLI usage: refexamples.startNodeBonus = 0.0;

option name: negationPenalty
description: Penalty on negations (TODO: better explanation).
values: class org.dllearner.core.options.IntegerConfigOption
default value: 0
CLI usage: refexamples.negationPenalty = 0;

option name: expansionPenaltyFactor
description: describes the reduction in heuristic score one is willing to accept for reducing the length of the concept by one
values: class org.dllearner.core.options.DoubleConfigOption
default value: 0.02
CLI usage: refexamples.expansionPenaltyFactor = 0.02;



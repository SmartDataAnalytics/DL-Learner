/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./conf.jj */
/*@egen*//**
 * Copyright (C) 2007, Jens Lehmann
 *
 * This file is part of DL-Learner.
 * 
 * DL-Learner is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DL-Learner is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * Conf file parser.
 */

options {
  JDK_VERSION = "1.6";
  STATIC = false;
}

PARSER_BEGIN(ConfParser)
package org.dllearner.parser; 

import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.TreeMap;
import java.util.Set;
import java.util.HashSet;
import java.util.SortedSet;
import java.util.TreeSet;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;

import org.dllearner.Main;
import org.dllearner.Info;

import org.dllearner.core.dl.*;
import org.dllearner.ConfigurationOption;
import org.dllearner.utilities.*;

public class ConfParser/*@bgen(jjtree)*/implements ConfParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTConfParserState jjtree = new JJTConfParserState();

/*@egen*/
	
	private SortedSet<Individual> positiveExamples = new TreeSet<Individual>();
	private SortedSet<Individual> negativeExamples = new TreeSet<Individual>();
	
	// Konfigurationsoptionen
	private List<ConfigurationOption> confOptions = new LinkedList<ConfigurationOption>();
	
	// Funktionsaufrufe (die gleiche Funktion darf mehrmals mit unterschiedlichen
	// Argumenten aufgerufen werden)
	// private static Map<String,Set<String>> functionCallsAlt = new TreeMap<String,Set<String>>();
	// jeder Funktionsaufruf hat eine Liste von n Argumenten; alle Funktionsaufrufe
	// werden in einer Liste gespeichert
	private List<List<String>> functionCalls = new LinkedList<List<String>>();
	// => irgendwie Funktionsname + Argumente speichern
	// => d.h. man br\u00e4uchte f\u00fcr jede Funktion so eine Liste oder das erste Element
	// der Liste ist der Funktionsname <= ist noch die praktikabelste Variante
	
	// speichert, ob der Parser-Konstruktor aufgerufen wurde: momemtan handelt es
	// sich um einen statischen Parser, d.h. der Konstruktor darf nur einmal
	// aufgerufen werden; weitere Parsevorg\u00e4nge erfolgen dann mit ReInit
	// TODO: bei einem Webservice braucht man wahrscheinlich einen dynamischen Parser
	// private static boolean constructorCalled = false;
	
	// Wissensbasis
	// private KB kb = new KB();
	// public static final String internalNamespace = "http://localhost/foo#";
	
	public Map<AtomicConcept,SortedSet<Individual>> getPositiveExamples() {
		return positiveExamples;
	}
	
	public Map<AtomicConcept,SortedSet<Individual>> getNegativeExamples() {
		return negativeExamples;
	}
	
	public List<ConfigurationOption> getConfOptions() {
		return confOptions;
	}
	
	public List<List<String>> getFunctionCalls() {
		return functionCalls;
	}
	
	/*
	private static void addFunctionCall(String functionName, String argument) {
		if(functionCalls.containsKey(functionName)) {
			functionCalls.get(functionName).add(argument);
		} else {
			Set<String> newFunction = new TreeSet<String>();
			newFunction.add(argument);
			functionCalls.put(functionName,newFunction);
		}		
	}
	*/	
	

	/*
	public static SimpleNode parseString(String str) throws ParseException {
		StringReader sr = new StringReader(str);
		DLLearner learner = new DLLearner(sr);
		SimpleNode n = learner.Start();
		return n;
	}
	*/
	
	public static ConfParser parseFile(String filename) {
		ConfParser learner = null;
		try {
			learner = new ConfParser(new FileInputStream(filename));
			learner.Start();
		} catch(FileNotFoundException e) {
			e.printStackTrace();
		} catch(ParseException e) {
			e.printStackTrace();
		}
		return learner;
	}
	
  public static void main(String args[]) {

    if(args.length==0) {
        System.out.println("Please specify an input file.");
        System.exit(0);
    }

    System.out.println("Starting DL-Learner (Build " + Info.build + ")");
	// System.out.println(args);
 
	// System.out.println(args[0]);
	// System.out.println(args[1]);
	// System.out.println(args.length);

    File f = new File(args[args.length-1]);
    String baseDir = "";

	System.out.print("Parsing " + f.getName() + " ... ");
    long parseStartTime = System.currentTimeMillis();

    SimpleNode n = null;
    ConfParser learner = null;
    try {
        learner = new ConfParser(new FileInputStream(args[args.length-1]));
        baseDir = f.getParentFile().getPath();    	
    } catch(IOException e) {
        System.err.println(e);
        System.exit(0);
    }
    try {
      n = learner.Start();  
      // n.dump("");
      // System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("\nParse exception occurred. Please follow the advise given below.");
      System.out.println(e.getMessage());
      e.printStackTrace();
      System.exit(0);
    }

    long parseDuration = System.currentTimeMillis() - parseStartTime;
    System.out.println("OK (" + parseDuration + " ms)");

    boolean queryMode = false;
    // solution test mode wird nicht unbedingt gebraucht, da man die covers
    // gleich standardm\u00e4\u00dfig beim query mit anzeigen kann
    // boolean solutionTestMode = false;
    
    if(args.length>1 && args[0].equals("-q"))
    	queryMode = true;
    
    //if(args.length>1 && args[0].equals("-qt")) {
    //	queryMode = true;
    //	solutionTestMode = true;
    //}
    
    // new Main(n, baseDir, queryMode);
    // Parser erstmal Standalone testen
    // n.dump("");
    
    // neuer Aufruf des Hauptprogramms
    // TODO: remove (in the future, the parser will be called from whatever method
    // needs it, instead of starting the learning process itself)
    // new Main(kb,positiveExamples,negativeExamples,confOptions,functionCalls,baseDir,queryMode);
  }
}
PARSER_END(ConfParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
} 

TOKEN :
{
    < COMMAND_END: "." >
  | < CONF_END: ";" >
  | < POS_EX: "+" >
  | < NEG_EX: "-" >
  | < ID: ["a"-"z"] (["_","a"-"z","A"-"Z","0"-"9"])* >
  | < NUMBER: (["1"-"9"] (["0"-"9"])* | "0") >
  | < DOUBLE: (["1"-"9"] (["0"-"9"])* | "0") "." (["0"-"9"])* >
  | <TOP: "TOP" >
  | <BOTTOM: "BOTTOM" >
  | <AND: "AND" >
  | <OR: "OR" >
  | <EXISTS: "EXISTS" | "SOME" >
  | <ALL: "ALL" | "FORALL" >
  | <NOT: "NEG" | "NOT" >
  | <GE: ">=" >
  | <LE: "<=" >
  | <STRING: "\"" (~["\"","\\","\n","\r"])* "\"">
}

SimpleNode Start() : 
{/*@bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ConceptAssertion conceptAssertion;
	RoleAssertion roleAssertion;
	RBoxAxiom rBoxAxiom;
	Equality equality;
	Inclusion inclusion;
	ConfigurationOption confOption;
}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  (		// bei Konfigurationsoption geht der Parser bis zum Semikolon durch, da das das einzige
  		// sichere Unterscheidungsmerkmal ist
  		LOOKAHEAD(Id() [ "." Id() ] "="  ( Id() | Integer() | Double() | String() 
  		  | "{" "}" | "{" ( ( String() | Id() ) "," )* (String() | Id()) "}" ) <CONF_END>)  confOption=ConfOption()
  		  { confOptions.add(confOption); }
  	|	LOOKAHEAD(Id() "(" String() ("," String())* ")" <CONF_END>) FunctionCall()
  		// positive bzw. negative Beispiele sind an "+" bzw. "-" erkennbar
  	|	LOOKAHEAD(<POS_EX>) PosExample()
  	|	LOOKAHEAD(<NEG_EX>) NegExample()
  )*
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConfigurationOption ConfOption() : 
{/*@bgen(jjtree) ConfOption */
        SimpleNode jjtn000 = new SimpleNode(JJTCONFOPTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	boolean containsSubOption=false, isNumeric=false, isDouble=false, isSet=false;
	String option="", subOption="", value="", tmp=""; 
	int number = 0;
	double numberDouble = 0;
	ConfigurationOption confOption;
	Set<String> values = new HashSet<String>();
}
{/*@bgen(jjtree) ConfOption */
  try {
/*@egen*/
  option=Id() [ "." subOption=Id() {containsSubOption=true;} ] 
  "="  (   value=Id() 
         | value=String()
         | number=Integer() {isNumeric=true;} 
         | numberDouble=Double() {isNumeric=true; isDouble=true;} 
         | LOOKAHEAD("{" "}") "{" "}" {isSet=true;} // leere Menge 
         | "{" ( LOOKAHEAD(2) ( tmp=String() | tmp=Id() ) {values.add(tmp);} "," )* 
           (tmp=String() | tmp=Id()) {values.add(tmp);} "}" {isSet=true;}
           // eine Liste von ein oder mehr Elementen in Mengenschreibweise
         ) <CONF_END>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  	if(containsSubOption) {
  		if(isNumeric)
  			if(isDouble)
	  			confOption = new ConfigurationOption(option,subOption,numberDouble);
	  		else
		  		confOption = new ConfigurationOption(option,subOption,number);
  		else
  			if(isSet)
  				confOption = new ConfigurationOption(option,subOption,values);
  			else
  				confOption = new ConfigurationOption(option,subOption,value);
  	} else {
  		if(isNumeric)
  			if(isDouble)
	  			confOption = new ConfigurationOption(option,numberDouble);
	  		else
	  			confOption = new ConfigurationOption(option,number);
  		else
  			if(isSet)
	  			confOption = new ConfigurationOption(option,values);
	  		else
	  			confOption = new ConfigurationOption(option,value);
  	}
  	return confOption;
  	// confOptions.add(confOption);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionCall() : 
{/*@bgen(jjtree) FunctionCall */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONCALL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String s, s1, s2;
	List<String> list = new LinkedList<String>();
}
{/*@bgen(jjtree) FunctionCall */
        try {
/*@egen*/
  	s1=Id() "(" s2=String() { list.add(s1); list.add(s2); }
  	("," s=String() { list.add(s); } )* ")" <CONF_END>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{ functionCalls.add(list); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PosExample() : {/*@bgen(jjtree) PosExample */
                      SimpleNode jjtn000 = new SimpleNode(JJTPOSEXAMPLE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Individual i; }
{/*@bgen(jjtree) PosExample */
        try {
/*@egen*/
  	<POS_EX> i=Individual()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{ positiveExamples.add(i); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NegExample() : {/*@bgen(jjtree) NegExample */
                      SimpleNode jjtn000 = new SimpleNode(JJTNEGEXAMPLE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Individual i; }
{/*@bgen(jjtree) NegExample */
        try {
/*@egen*/
  	<NEG_EX> i=Individual()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{ negativeExamples.add(i); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Individual Individual() :
{/*@bgen(jjtree) Individual */
        SimpleNode jjtn000 = new SimpleNode(JJTINDIVIDUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String name;
}
{/*@bgen(jjtree) Individual */
        try {
/*@egen*/
	(name=Id() | name=String())/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new Individual(KBParser.getInternalURI(name));
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Id() : 
{/*@bgen(jjtree) Id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Id */
  try {
/*@egen*/
  t=<ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

double Double() : 
{/*@bgen(jjtree) Double */
  SimpleNode jjtn000 = new SimpleNode(JJTDOUBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Double */
  try {
/*@egen*/
  t=<DOUBLE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new Double(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

int Integer() : 
{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t=<NUMBER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return new Integer(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String String() : 
{/*@bgen(jjtree) String */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  String s;
}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t=<STRING>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    // enclosing "" are removed
    s = t.image;
    s = s.substring(1, s.length() - 1);
    return s;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

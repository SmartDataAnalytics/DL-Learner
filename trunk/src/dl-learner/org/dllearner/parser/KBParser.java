/* Generated By:JJTree&JavaCC: Do not edit this line. KBParser.java */
package org.dllearner.parser;

import org.dllearner.core.dl.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.StringReader;

public @SuppressWarnings("all") class KBParser/*@bgen(jjtree)*/implements KBParserTreeConstants, KBParserConstants {/*@bgen(jjtree)*/
  protected JJTKBParserState jjtree = new JJTKBParserState();
        public static final String internalNamespace = "http://localhost/foo#";

        // method to give all internal stuff an URI (not necessary for DLs, but for OWL ontologies
        // and it should be possible to represent the internal KB as OWL ontology)
        public static String getInternalURI(String name) {
                if(name.startsWith("http://"))
                        return name;
                else
                        return internalNamespace + name;
        }

        public static Concept parseConcept(String string) throws ParseException {
                KBParser parser = new KBParser(new StringReader(string));
                return parser.Concept();
        }

        public static KB parseKBFile(File file) throws FileNotFoundException, ParseException {
                KBParser parser = new KBParser(new FileInputStream(file));
                return parser.KB();
        }

  final public KB KB() throws ParseException {
 /*@bgen(jjtree) KB */
        SimpleNode jjtn000 = new SimpleNode(JJTKB);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ConceptAssertion conceptAssertion;
        RoleAssertion roleAssertion;
        RBoxAxiom rBoxAxiom;
        Equality equality;
        Inclusion inclusion;
        KB kb = new KB();
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case TOP:
        case BOTTOM:
        case EXISTS:
        case ALL:
        case NOT:
        case GE:
        case LE:
        case STRING:
        case 22:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        if (jj_2_1(2147483647)) {
          conceptAssertion = ABoxConcept();
                  kb.addABoxAxiom(conceptAssertion);
        } else if (jj_2_2(2147483647)) {
          roleAssertion = ABoxRole();
                  kb.addABoxAxiom(roleAssertion);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 28:
            rBoxAxiom = Transitive();
                  kb.addRBoxAxiom(rBoxAxiom);
            break;
          case 29:
            rBoxAxiom = Functional();
                  kb.addRBoxAxiom(rBoxAxiom);
            break;
          case 30:
            rBoxAxiom = Symmetric();
                  kb.addRBoxAxiom(rBoxAxiom);
            break;
          case 31:
            rBoxAxiom = Inverse();
                  kb.addRBoxAxiom(rBoxAxiom);
            break;
          case 32:
            rBoxAxiom = Subrole();
                  kb.addRBoxAxiom(rBoxAxiom);
            break;
          default:
            jj_la1[1] = jj_gen;
            if (jj_2_3(2147483647)) {
              equality = TBoxEquiv();
                  kb.addTBoxAxiom(equality);
            } else if (jj_2_4(2147483647)) {
              inclusion = TBoxSub();
                  kb.addTBoxAxiom(inclusion);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return kb;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConceptAssertion ABoxConcept() throws ParseException {
                                  /*@bgen(jjtree) ABoxConcept */
                                  SimpleNode jjtn000 = new SimpleNode(JJTABOXCONCEPT);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Concept c; Individual i;
    try {
      c = Concept();
      jj_consume_token(22);
      i = Individual();
      jj_consume_token(23);
      jj_consume_token(COMMAND_END);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return new ConceptAssertion(c,i);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public RoleAssertion ABoxRole() throws ParseException {
 /*@bgen(jjtree) ABoxRole */
        SimpleNode jjtn000 = new SimpleNode(JJTABOXROLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);boolean isNegated=false;
        AtomicRole ar;
        Individual i1,i2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        Not();
                isNegated=true;
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      ar = AtomicRole();
      jj_consume_token(22);
      i1 = Individual();
      jj_consume_token(24);
      i2 = Individual();
      jj_consume_token(23);
      jj_consume_token(COMMAND_END);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if(isNegated)
                        {if (true) throw new Error("negated role assertions not supported yet");}
                else
                        {if (true) return new RoleAssertion(ar,i1,i2);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public TransitiveRoleAxiom Transitive() throws ParseException {
                                    /*@bgen(jjtree) Transitive */
                                    SimpleNode jjtn000 = new SimpleNode(JJTTRANSITIVE);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);AtomicRole ar;
    try {
      jj_consume_token(28);
      jj_consume_token(22);
      ar = AtomicRole();
      jj_consume_token(23);
      jj_consume_token(COMMAND_END);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return new TransitiveRoleAxiom(ar);}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public FunctionalRoleAxiom Functional() throws ParseException {
                                    /*@bgen(jjtree) Functional */
                                    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONAL);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);AtomicRole ar;
    try {
      jj_consume_token(29);
      jj_consume_token(22);
      ar = AtomicRole();
      jj_consume_token(23);
      jj_consume_token(COMMAND_END);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return new FunctionalRoleAxiom(ar);}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public SymmetricRoleAxiom Symmetric() throws ParseException {
                                  /*@bgen(jjtree) Symmetric */
                                  SimpleNode jjtn000 = new SimpleNode(JJTSYMMETRIC);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);AtomicRole ar;
    try {
      jj_consume_token(30);
      jj_consume_token(22);
      ar = AtomicRole();
      jj_consume_token(23);
      jj_consume_token(COMMAND_END);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return new SymmetricRoleAxiom(ar);}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public InverseRoleAxiom Inverse() throws ParseException {
                              /*@bgen(jjtree) Inverse */
                              SimpleNode jjtn000 = new SimpleNode(JJTINVERSE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);AtomicRole ar1,ar2;
    try {
      jj_consume_token(31);
      jj_consume_token(22);
      ar1 = AtomicRole();
      jj_consume_token(24);
      ar2 = AtomicRole();
      jj_consume_token(23);
      jj_consume_token(COMMAND_END);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return new InverseRoleAxiom(ar1,ar2);}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public SubRoleAxiom Subrole() throws ParseException {
                          /*@bgen(jjtree) Subrole */
                          SimpleNode jjtn000 = new SimpleNode(JJTSUBROLE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);AtomicRole ar1,ar2;
    try {
      jj_consume_token(32);
      jj_consume_token(22);
      ar1 = AtomicRole();
      jj_consume_token(24);
      ar2 = AtomicRole();
      jj_consume_token(23);
      jj_consume_token(COMMAND_END);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return new SubRoleAxiom(ar1,ar2);}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public Equality TBoxEquiv() throws ParseException {
                        /*@bgen(jjtree) TBoxEquiv */
                        SimpleNode jjtn000 = new SimpleNode(JJTTBOXEQUIV);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Concept c1,c2;
    try {
      c1 = Concept();
      jj_consume_token(25);
      c2 = Concept();
      jj_consume_token(COMMAND_END);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return new Equality(c1,c2);}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public Inclusion TBoxSub() throws ParseException {
                       /*@bgen(jjtree) TBoxSub */
                       SimpleNode jjtn000 = new SimpleNode(JJTTBOXSUB);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Concept c1,c2;
    try {
      c1 = Concept();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        jj_consume_token(26);
        break;
      case 27:
        jj_consume_token(27);
        break;
      case 33:
        jj_consume_token(33);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      c2 = Concept();
      jj_consume_token(COMMAND_END);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return new Inclusion(c1,c2);}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public Concept Concept() throws ParseException {
 /*@bgen(jjtree) Concept */
        SimpleNode jjtn000 = new SimpleNode(JJTCONCEPT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Concept c,c1,c2;
        AtomicConcept ac;
        AtomicRole ar;
        String s;
        int i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOP:
        Top();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           {if (true) return new Top();}
        break;
      case BOTTOM:
        Bottom();
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              {if (true) return new Bottom();}
        break;
      case ID:
      case STRING:
        ac = AtomicConcept();
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          {if (true) return ac;}
        break;
      default:
        jj_la1[4] = jj_gen;
        if (jj_2_5(2147483647)) {
          jj_consume_token(22);
          c1 = Concept();
          And();
          c2 = Concept();
          jj_consume_token(23);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new Conjunction(c1,c2);}
        } else if (jj_2_6(2147483647)) {
          jj_consume_token(22);
          c1 = Concept();
          Or();
          c2 = Concept();
          jj_consume_token(23);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new Disjunction(c1,c2);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXISTS:
            Exists();
            ar = AtomicRole();
            jj_consume_token(COMMAND_END);
            c = Concept();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new Exists(ar,c);}
            break;
          case ALL:
            All();
            ar = AtomicRole();
            jj_consume_token(COMMAND_END);
            c = Concept();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new All(ar,c);}
            break;
          case NOT:
            Not();
            c = Concept();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new Negation(c);}
            break;
          case GE:
            GE();
            i = Integer();
            ar = AtomicRole();
            jj_consume_token(COMMAND_END);
            c = Concept();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new GreaterEqual(i,ar,c);}
            break;
          case LE:
            LE();
            i = Integer();
            ar = AtomicRole();
            jj_consume_token(COMMAND_END);
            c = Concept();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new LessEqual(i,ar,c);}
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Or() throws ParseException {
             /*@bgen(jjtree) Or */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OR);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  final public void And() throws ParseException {
              /*@bgen(jjtree) And */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AND);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  final public void Top() throws ParseException {
              /*@bgen(jjtree) Top */
  SimpleNode jjtn000 = new SimpleNode(JJTTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TOP);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  final public void Bottom() throws ParseException {
                 /*@bgen(jjtree) Bottom */
  SimpleNode jjtn000 = new SimpleNode(JJTBOTTOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOTTOM);
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  final public void Exists() throws ParseException {
                 /*@bgen(jjtree) Exists */
  SimpleNode jjtn000 = new SimpleNode(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXISTS);
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                       }
    }
  }

  final public void All() throws ParseException {
              /*@bgen(jjtree) All */
  SimpleNode jjtn000 = new SimpleNode(JJTALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ALL);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  final public void Not() throws ParseException {
              /*@bgen(jjtree) Not */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
    } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
    }
  }

  final public void GE() throws ParseException {
             /*@bgen(jjtree) GE */
  SimpleNode jjtn000 = new SimpleNode(JJTGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GE);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  final public void LE() throws ParseException {
             /*@bgen(jjtree) LE */
  SimpleNode jjtn000 = new SimpleNode(JJTLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LE);
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  final public AtomicConcept AtomicConcept() throws ParseException {
 /*@bgen(jjtree) AtomicConcept */
        SimpleNode jjtn000 = new SimpleNode(JJTATOMICCONCEPT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String name;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        name = Id();
        break;
      case STRING:
        name = String();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return new AtomicConcept(getInternalURI(name));}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public AtomicRole AtomicRole() throws ParseException {
 /*@bgen(jjtree) AtomicRole */
        SimpleNode jjtn000 = new SimpleNode(JJTATOMICROLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String name;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        name = Id();
        break;
      case STRING:
        name = String();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return new AtomicRole(getInternalURI(name));}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Individual Individual() throws ParseException {
 /*@bgen(jjtree) Individual */
        SimpleNode jjtn000 = new SimpleNode(JJTINDIVIDUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String name;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        name = Id();
        break;
      case STRING:
        name = String();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return new Individual(getInternalURI(name));}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Id() throws ParseException {
 /*@bgen(jjtree) Id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    // jjtThis.setId(t.image);
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public double Double() throws ParseException {
 /*@bgen(jjtree) Double */
  SimpleNode jjtn000 = new SimpleNode(JJTDOUBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DOUBLE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new Double(t.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    // jjtThis.setId(t.image);
    // muss noch in Integer umgewandelt werden
    {if (true) return new Integer(t.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String String() throws ParseException {
 /*@bgen(jjtree) String */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String s;
    try {
      t = jj_consume_token(STRING);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    // jjtThis.setId(t.image);
    // es werden sofort die Anfuehrungszeichen abgeschnitten
    s = t.image;
    s = s.substring(1, s.length() - 1);
    {if (true) return s;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(BOTTOM)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(TOP)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_2()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(25)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_30()) return true;
    if (jj_3R_29()) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(COMMAND_END)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_28()) return true;
    if (jj_3R_29()) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(COMMAND_END)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    if (jj_scan_token(22)) return true;
    if (jj_3R_3()) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(22)) return true;
    if (jj_3R_3()) return true;
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(COMMAND_END)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_27()) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(COMMAND_END)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_26()) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(COMMAND_END)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_6()) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_32()) return true;
    return false;
  }

  public KBParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xf07f3200,0xf0000000,0x40000,0xc000000,0x203200,0x1f0000,0x200200,0x200200,0x200200,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1,0x1,0x0,0x2,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public KBParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public KBParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KBParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public KBParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KBParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public KBParser(KBParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(KBParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

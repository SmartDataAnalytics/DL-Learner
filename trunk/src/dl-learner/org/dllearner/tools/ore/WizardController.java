/**
 * Copyright (C) 2007-2008, Jens Lehmann
 *
 * This file is part of DL-Learner.
 * 
 * DL-Learner is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DL-Learner is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.dllearner.tools.ore;


import java.awt.event.ActionListener;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutionException;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

import org.dllearner.core.owl.Description;
import org.dllearner.core.owl.NamedClass;
import org.semanticweb.owl.model.OWLOntologyChange;

/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is pressed,
 * the controller will update the model to show a new panel and reset the state of
 * the buttons as necessary.
 * @author Lorenz Buehmann
 */
public class WizardController implements ActionListener {
    
    private Wizard wizard;
    
    /**
     * This constructor accepts a reference to the Wizard component that created it,
     * which it uses to update the button components and access the WizardModel.
     * @param w A callback to the Wizard component that created this controller.
     */    
    public WizardController(Wizard w) {
        wizard = w;
    }

    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Wizard class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */    
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        
        if (evt.getActionCommand().equals(Wizard.CANCEL_BUTTON_ACTION_COMMAND)){
            cancelButtonPressed();
        } else if (evt.getActionCommand().equals(Wizard.BACK_BUTTON_ACTION_COMMAND)){
            backButtonPressed();
        } else if (evt.getActionCommand().equals(Wizard.NEXT_BUTTON_ACTION_COMMAND)){
            nextButtonPressed();
        }
    }
    
    
    
    private void cancelButtonPressed() {
        
        wizard.close(Wizard.CANCEL_RETURN_CODE);
    }

    private void nextButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        ORE ore = model.getOre();
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        WizardPanelDescriptor nextDescriptor = model.getPanelHashMap().get(nextPanelDescriptor);
      
        if(nextPanelDescriptor.equals("CLASS_CHOOSE_OWL_PANEL")){
//        	model.getOre().getOwlReasoner().isSatisfiable()
        	
        	((ClassPanelOWLDescriptor) nextDescriptor).getOwlClassPanel().getModel().clear();
        	new ConceptRetriever(nextPanelDescriptor).execute();
        }
       
        if(nextPanelDescriptor.equals("LEARNING_PANEL")){
        	ore.init();
        	LearningPanelDescriptor learnDescriptor = ((LearningPanelDescriptor) model.getPanelHashMap().get(nextPanelDescriptor));
        	learnDescriptor.setPanelDefaults();
        	        	
        }
        
        if(nextPanelDescriptor.equals("REPAIR_PANEL")){
        	RepairPanelDescriptor repair = ((RepairPanelDescriptor) model.getPanelHashMap().get(nextPanelDescriptor));
        	repair.refreshExampleLists();
        	
//        	OWLOntologyChange change = model.getOre().getModi().addAxiomToOWL(model.getOre().getConceptToAdd(), model.getOre().getIgnoredConcept());
//        	repair.getOntologyChanges().add(change);

        }
        
        if(nextPanelDescriptor.equals("SAVE_PANEL")){

        	Description newDesc = model.getOre().getNewClassDescription().getDescription();
        	Description oldClass = model.getOre().getIgnoredConcept();
        	
        	List<OWLOntologyChange> changes = ore.getModifier().rewriteClassDescription(newDesc, oldClass);
        	((RepairPanelDescriptor) descriptor).getOntologyChanges().addAll(changes);
                	
        }
        
        
        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier) {
            wizard.close(Wizard.FINISH_RETURN_CODE);
        } else {        
            wizard.setCurrentPanel(nextPanelDescriptor);
        }
        
        //TODO
        refreshLeftPanel(nextPanelDescriptor);
        
        
        
        
        
    }
    
    
    private void backButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
 
        //  Get the descriptor that the current panel identifies as the previous
        //  panel, and display it.
        
        Object backPanelDescriptor = descriptor.getBackPanelDescriptor();        
        
        
        if(backPanelDescriptor.equals("LEARNING_PANEL")){
        	RepairPanelDescriptor repairDescriptor = (RepairPanelDescriptor) descriptor;
        	if(repairDescriptor.getOntologyChanges().size() > 0){
	        	if (JOptionPane.showConfirmDialog(wizard.getDialog(),
				        "All changes will be lost!", "Warning!", 
				        JOptionPane.YES_NO_OPTION)
				     == JOptionPane.YES_OPTION){
	
	        		model.getOre().getModifier().undoChanges(repairDescriptor.getOntologyChanges());
	        		repairDescriptor.getOntologyChanges().clear();
					wizard.setCurrentPanel(backPanelDescriptor);
			        refreshLeftPanel(backPanelDescriptor);
				}
        	} else{
        		wizard.setCurrentPanel(backPanelDescriptor);
		        refreshLeftPanel(backPanelDescriptor);
        	}
        	
        	
        	
        } else if(backPanelDescriptor.equals("CLASS_CHOOSE_OWL_PANEL")){
        	LearningPanelDescriptor learnDescriptor = (LearningPanelDescriptor) descriptor;
        	if(learnDescriptor.getLa() != null){
        		learnDescriptor.getLa().stop();
        		learnDescriptor.getTimer().cancel();
        	}
        	
        	wizard.setCurrentPanel(backPanelDescriptor);
	        refreshLeftPanel(backPanelDescriptor);
    	
        }else{
        	wizard.setCurrentPanel(backPanelDescriptor);
            refreshLeftPanel(backPanelDescriptor);
        }
        
        
    }
    
    void refreshLeftPanel(Object panelDescriptor){
    	
    	if(panelDescriptor.equals("INTRODUCTION_PANEL")){
        	wizard.setLeftPanel(0);
        }
    	if(panelDescriptor.equals("KNOWLEDGESOURCE_CHOOSE_PANEL")){
        	wizard.setLeftPanel(1);
        }
    	if(panelDescriptor.equals("CLASS_CHOOSE_OWL_PANEL") || panelDescriptor.equals("CLASS_CHOOSE_SPARQL_PANEL")){
        	wizard.setLeftPanel(2);
        }
    	if(panelDescriptor.equals("LEARNING_PANEL")){
        	wizard.setLeftPanel(3);
        }
    	if(panelDescriptor.equals("REPAIR_PANEL")){
        	wizard.setLeftPanel(4);
        }
    	if(panelDescriptor.equals("SAVE_PANEL")){
        	wizard.setLeftPanel(5);
        }
    	
    	
        
    }

    
    void resetButtonsToPanelRules() {
    
        //  Reset the buttons to support the original panel rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the panel is finishable.
        
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        model.setCancelButtonText(Wizard.CANCEL_TEXT);
//        model.setCancelButtonIcon(Wizard.CANCEL_ICON);
        
        //  If the panel in question has another panel behind it, enable
        //  the back button. Otherwise, disable it.
        
        model.setBackButtonText(Wizard.BACK_TEXT);

        
        if (descriptor.getBackPanelDescriptor() != null){
            model.setBackButtonEnabled(Boolean.TRUE);
        } else{
            model.setBackButtonEnabled(Boolean.FALSE);
        }
        //  If the panel in question has one or more panels in front of it,
        //  enable the next button. Otherwise, disable it.
 
        if (descriptor.getNextPanelDescriptor() != null){
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        } else{
            model.setNextFinishButtonEnabled(Boolean.FALSE);
        }
        //  If the panel in question is the last panel in the series, change
        //  the Next button to Finish. Otherwise, set the text back to Next.
        
        if (descriptor.getNextPanelDescriptor() instanceof WizardPanelDescriptor.FinishIdentifier) {
            model.setNextFinishButtonText(Wizard.FINISH_TEXT);

        } else {
            model.setNextFinishButtonText(Wizard.NEXT_TEXT);

        }
        
    }
    /**
     * Inner class to get all atomic classes in a background thread.
     * @author Lorenz Buehmann
     *
     */
    class ConceptRetriever extends SwingWorker<Set<NamedClass>, NamedClass> {
		private Object nextPanelID;
		private ClassPanelOWL owlClassPanel;
		
		public ConceptRetriever(Object nextPanelDescriptor) {

			nextPanelID = nextPanelDescriptor;
			owlClassPanel = ((ClassPanelOWLDescriptor) wizard.getModel().getPanelHashMap().get(nextPanelID)).getOwlClassPanel();
		}

		@Override
		public Set<NamedClass> doInBackground() {

			owlClassPanel.getStatusLabel().setText("Loading atomic classes");
			owlClassPanel.getLoadingLabel().setBusy(true);
			owlClassPanel.getList().setCellRenderer(new ColorListCellRenderer(wizard.getModel().getOre()));

			wizard.getModel().getOre().initReasoners();

			Set<NamedClass> ind = wizard.getModel().getOre()
					.getReasonerComponent().getNamedClasses();

			return ind;
		}

		@Override
		public void done() {
			Set<NamedClass> ind = null;
			try {
				ind = get();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			DefaultListModel dm = new DefaultListModel();
			
			if(ind != null){
				for (NamedClass cl : ind) {
					dm.addElement(cl);
					
					//nextPanel.panel3.getModel().addElement(cl);
					
				}
			}
//			wizard.getModel().getOre().setAllAtomicConcepts(ind);
			owlClassPanel.getList().setModel(dm);
			owlClassPanel.getStatusLabel().setText("Atomic classes loaded");
			owlClassPanel.getLoadingLabel().setBusy(false);
		}

	}
   

    
    
}

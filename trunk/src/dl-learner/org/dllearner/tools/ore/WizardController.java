package org.dllearner.tools.ore;


import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutionException;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

import org.dllearner.core.owl.Individual;
import org.dllearner.core.owl.NamedClass;

/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is pressed,
 * the controller will update the model to show a new panel and reset the state of
 * the buttons as necessary.
 */
public class WizardController implements ActionListener {
    
    private Wizard wizard;
    
    /**
     * This constructor accepts a reference to the Wizard component that created it,
     * which it uses to update the button components and access the WizardModel.
     * @param w A callback to the Wizard component that created this controller.
     */    
    public WizardController(Wizard w) {
        wizard = w;
    }

    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Wizard class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */    
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        
        if (evt.getActionCommand().equals(Wizard.CANCEL_BUTTON_ACTION_COMMAND))
            cancelButtonPressed();
        else if (evt.getActionCommand().equals(Wizard.BACK_BUTTON_ACTION_COMMAND))
            backButtonPressed();
        else if (evt.getActionCommand().equals(Wizard.NEXT_BUTTON_ACTION_COMMAND))
            nextButtonPressed();
        
    }
    
    
    
    private void cancelButtonPressed() {
        
        wizard.close(Wizard.CANCEL_RETURN_CODE);
    }

    private void nextButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        
        //TODO nochmal überdenken
        if(nextPanelDescriptor.equals("CLASS_CHOOSE_OWL_PANEL")){
        	((ClassPanelOWLDescriptor)model.getPanelHashMap().get(nextPanelDescriptor)).panel3.getModel().clear();
        	new ConceptRetriever(nextPanelDescriptor).execute();
        }
       
        
        if( nextPanelDescriptor.equals("REPAIR_PANEL")){
        	RepairPanelDescriptor repair = ((RepairPanelDescriptor)model.getPanelHashMap().get(nextPanelDescriptor));
        	repair.panel4.getNegFailureModel().clear();
        	repair.panel4.getPosFailureModel().clear();
//        	OWLOntologyChange change = model.getOre().getModi().addAxiomToOWL(model.getOre().getConceptToAdd(), model.getOre().getIgnoredConcept());
//        	repair.getOntologyChanges().add(change);
        	new FailInstancesRetriever(nextPanelDescriptor).execute();
        	
               	
        }
        if(nextPanelDescriptor.equals("LEARNING_PANEL")){
        	wizard.getModel().getOre().init();
        	((LearningPanelDescriptor)model.getPanelHashMap().get(nextPanelDescriptor)).panel4.getStatusLabel().setText("");
        	((LearningPanelDescriptor)model.getPanelHashMap().get(nextPanelDescriptor)).panel4.getModel().clear();
        	
        }
        
        
        
        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier) {
            wizard.close(Wizard.FINISH_RETURN_CODE);
        } else {        
            wizard.setCurrentPanel(nextPanelDescriptor);
        }
        
        //TODO
        refreshLeftPanel(nextPanelDescriptor);
        
        
        
        
        
    }
    
    
    private void backButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
 
        //  Get the descriptor that the current panel identifies as the previous
        //  panel, and display it.
        
        Object backPanelDescriptor = descriptor.getBackPanelDescriptor();        
        
        
        if(backPanelDescriptor.equals("LEARNING_PANEL")){
        	if (JOptionPane.showConfirmDialog(wizard.getDialog(),
			        "All changes will be lost!", "Warning!", 
			        JOptionPane.YES_NO_OPTION)
			     == JOptionPane.YES_OPTION){

        		wizard.getModel().getOre().getModi().undoChanges(((RepairPanelDescriptor)descriptor).getOntologyChanges());
        		((RepairPanelDescriptor)descriptor).getOntologyChanges().clear();
				wizard.setCurrentPanel(backPanelDescriptor);
		        refreshLeftPanel(backPanelDescriptor);
			}
        	
        	
        }else{
        	wizard.setCurrentPanel(backPanelDescriptor);
            refreshLeftPanel(backPanelDescriptor);
        }
        
        
    }
    
    void refreshLeftPanel(Object panelDescriptor){
    	
    	if(panelDescriptor.equals("INTRODUCTION_PANEL")){
        	wizard.setLeftPanel(0);
        }
    	if(panelDescriptor.equals("KNOWLEDGESOURCE_CHOOSE_PANEL")){
        	wizard.setLeftPanel(1);
        }
    	if(panelDescriptor.equals("CLASS_CHOOSE_OWL_PANEL") || panelDescriptor.equals("CLASS_CHOOSE_SPARQL_PANEL")){
        	wizard.setLeftPanel(2);
        }
    	if(panelDescriptor.equals("LEARNING_PANEL")){
        	wizard.setLeftPanel(3);
        }
    	if(panelDescriptor.equals("REPAIR_PANEL")){
        	wizard.setLeftPanel(4);
        }
    	
    	
        
    }

    
    void resetButtonsToPanelRules() {
    
        //  Reset the buttons to support the original panel rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the panel is finishable.
        
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        model.setCancelButtonText(Wizard.CANCEL_TEXT);
//        model.setCancelButtonIcon(Wizard.CANCEL_ICON);
        
        //  If the panel in question has another panel behind it, enable
        //  the back button. Otherwise, disable it.
        
        model.setBackButtonText(Wizard.BACK_TEXT);

        
        if (descriptor.getBackPanelDescriptor() != null)
            model.setBackButtonEnabled(Boolean.TRUE);
        else
            model.setBackButtonEnabled(Boolean.FALSE);

        //  If the panel in question has one or more panels in front of it,
        //  enable the next button. Otherwise, disable it.
 
        if (descriptor.getNextPanelDescriptor() != null)
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        else
            model.setNextFinishButtonEnabled(Boolean.FALSE);
 
        //  If the panel in question is the last panel in the series, change
        //  the Next button to Finish. Otherwise, set the text back to Next.
        
        if (descriptor.getNextPanelDescriptor() instanceof WizardPanelDescriptor.FinishIdentifier) {
            model.setNextFinishButtonText(Wizard.FINISH_TEXT);

        } else {
            model.setNextFinishButtonText(Wizard.NEXT_TEXT);

        }
        
    }
    class ConceptRetriever extends SwingWorker<Set<NamedClass>, NamedClass> {
		Object nextPanelID;
		ClassPanelOWLDescriptor conceptPanel;
		public ConceptRetriever(Object nextPanelDescriptor) {

			nextPanelID = nextPanelDescriptor;
			conceptPanel = (ClassPanelOWLDescriptor) wizard.getModel().getPanelHashMap().get(nextPanelID);
		}

		@Override
		public Set<NamedClass> doInBackground() {

			conceptPanel.panel3.getStatusLabel().setText("Loading concepts");
			conceptPanel.panel3.getLoadingLabel().setBusy(true);
			conceptPanel.panel3.getList().setCellRenderer(new ColorListCellRenderer(wizard.getModel().getOre()));

			wizard.getModel().getOre().detectReasoner();

			Set<NamedClass> ind = wizard.getModel().getOre()
					.getReasoningService().getAtomicConcepts();

			return ind;
		}

		@Override
		public void done() {
			Set<NamedClass> ind = null;
			try {
				ind = get();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			DefaultListModel dm = new DefaultListModel();
			
			for (NamedClass cl : ind) {
				dm.addElement(cl);
				
				//nextPanel.panel3.getModel().addElement(cl);
				
			}
			wizard.getModel().getOre().setAllAtomicConcepts(ind);
			conceptPanel.panel3.getList().setModel(dm);
			conceptPanel.panel3.getStatusLabel().setText("Concepts loaded");
			conceptPanel.panel3.getLoadingLabel().setBusy(false);
		}

	}
    class FailInstancesRetriever extends SwingWorker<List<HashSet<Individual>>, HashSet<Individual>> {
		Object nextPanelID;
		RepairPanelDescriptor repairPanel;

		public FailInstancesRetriever(Object nextPanelDescriptor) {

			nextPanelID = nextPanelDescriptor;
			repairPanel = (RepairPanelDescriptor) wizard.getModel().getPanelHashMap().get(nextPanelID);
		}

		@Override
		public List<HashSet<Individual>> doInBackground() {
			
			repairPanel.panel4.getStatusLabel().setText("Loading conflicting instances");
			repairPanel.panel4.getLoadingLabel().setBusy(true);
			repairPanel.panel4.setCellRenderers(wizard.getModel().getOre());
		

			List<HashSet<Individual>> indList = wizard.getModel().getOre()
					.getFailureExamples();

			return indList;
		}

		@Override
		public void done() {
			List<HashSet<Individual>> indList = null;
			try {
				indList = get();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			RepairPanelDescriptor nextPanel = (RepairPanelDescriptor) wizard
					.getModel().getPanelHashMap().get(nextPanelID);
			DefaultListModel posDm = nextPanel.panel4.getPosFailureModel();
			DefaultListModel negDm = nextPanel.panel4.getNegFailureModel();
			
			for (Individual posInd : indList.get(0)) {
				posDm.addElement(posInd);
				System.out.println(posInd.getName());
			}
			for (Individual negInd : indList.get(1)) {
				negDm.addElement(negInd);
				System.out.println(negInd.getName());
			}
			
			nextPanel.panel4.getStatusLabel().setText(
					"Instances loaded");
			nextPanel.panel4.getLoadingLabel().setBusy(false);
		}

	}

    
    
}

/**
 * Copyright (C) 2007-2008, Jens Lehmann
 *
 * This file is part of DL-Learner.
 * 
 * DL-Learner is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DL-Learner is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package org.dllearner.gui;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.util.List;

import org.dllearner.cli.ConfMapper;
import org.dllearner.core.Component;
import org.dllearner.core.ComponentManager;
import org.dllearner.core.KnowledgeSource;
import org.dllearner.core.LearningAlgorithm;
import org.dllearner.core.LearningProblem;
import org.dllearner.core.ReasonerComponent;
import org.dllearner.core.config.ConfigEntry;
import org.dllearner.core.config.ConfigOption;
import org.dllearner.core.config.InvalidConfigOptionValueException;
import org.dllearner.kb.KBFile;
import org.dllearner.kb.OWLFile;
import org.dllearner.kb.sparql.SparqlKnowledgeSource;

/**
 * Save a conf file.
 * 
 * @author Jens Lehmann
 * @author Tilo Hielscher
 */
public class ConfigSave {

	private ConfMapper confMapper = new ConfMapper();
	private ComponentManager cm = ComponentManager.getInstance();	
	
	// private File file;
	private Config config;

	/**
	 * Creates object to save config.
	 * 
	 * @param config The central configuration handler.
	 */
	public ConfigSave(Config config) {
		this.config = config;
	}

	/**
	 * Save current configuration to a conf file.
	 * @param file The conf file to save to.
	 * @throws IOException Thrown if any IO errors occurr while writing the file.
	 */
	public void saveFile(File file) throws IOException {
		PrintWriter out = new PrintWriter(new FileWriter(file));
		out.println("/**");
		out.println(" * Conf file generated by DL-Learner GUI.");
		out.println(" */");
		
		// knowledge source
		out.println("\n// knowledge source");
		KnowledgeSource ks = config.getKnowledgeSource();
		if (ks != null) {
//			String ksString = confMapper.getComponentString(config.getKnowledgeSource().getClass());
			URL url = (URL) cm.getConfigOptionValue(ks, "url");
			if(ks instanceof OWLFile || ks instanceof KBFile) {
				out.println("import(\"" + url + "\");");
			} else if(ks instanceof SparqlKnowledgeSource) {
				out.println("import(\"" + url + "\",\"SPARQL\");");
			}
			writeConfigEntries(ks, out);
		}
		
		// reasoner
		out.println("\n// reasoner");
		ReasonerComponent rc = config.getReasoner();
		if (rc != null) {
			String typeString = confMapper.getComponentTypeString(ReasonerComponent.class);
			String componentString = confMapper.getComponentString(rc.getClass());
			out.println(typeString + " = " + componentString + ";");
			
			writeConfigEntries(config.getReasoner(), out);
		}
		
		// learning problem
		out.println("\n// learning problem");
		LearningProblem lp = config.getLearningProblem();
		if (lp != null) {
			String typeString = confMapper.getComponentTypeString(LearningProblem.class);
			String componentString = confMapper.getComponentString(lp.getClass());
			out.println(typeString + " = " + componentString + ";");			
			
			writeConfigEntries(config.getLearningProblem(), out);
		}
		
		// learning algorithm
		out.println("\n// learning algorithm");
		LearningAlgorithm la = config.getLearningAlgorithm();
		if (la != null) {
			String typeString = confMapper.getComponentTypeString(LearningAlgorithm.class);
			String componentString = confMapper.getComponentString(la.getClass());
			out.println(typeString + " = " + componentString + ";");			
			
			writeConfigEntries(config.getLearningAlgorithm(), out);
		}
		
		out.flush();
		out.close();
	}

	/**
	 * Writes all entries of the given component.
	 * 
	 * @param component
	 *            i.e. config.getKnowledgeSource(), config.getResaoner(), ...
	 */
	@SuppressWarnings("unchecked")
	private void writeConfigEntries(Component component, PrintWriter out) {

		// prefix (left hand side of all entries except special cases)
		String prefix = confMapper.getComponentString(component.getClass());
		Class<? extends Component> componentClass = component.getClass();
		
		List<ConfigOption<?>> optionList = ComponentManager.getConfigOptions(componentClass);
		for (int i = 0; i < optionList.size(); i++) {
			try {
				// get value and default value of option
				Object defaultValue = optionList.get(i).getDefaultValue();
				Object value = config.getComponentManager().getConfigOptionValue(component,
						optionList.get(i).getName());
				
				// we do not write option "url" as it is used in imports already;
				// TODO this is not very clean - maybe the special import construct
				// should be remove to avoid this special case;
				if (optionList.get(i).getName() != "url" && value != null) {
					if (value != null) {
						// only write values which are not equal to the default value
						if (!value.equals(defaultValue)) {
							ConfigOption option = cm.getConfigOption(componentClass, optionList.get(i).getName());
							ConfigEntry entry = new ConfigEntry(option, value);
							// call toConfString method of ConfigEntry
							out.println(entry.toConfString(prefix));
						}
					}
				}
			} catch (InvalidConfigOptionValueException e) {
				e.printStackTrace();
			}
		}
	}
}

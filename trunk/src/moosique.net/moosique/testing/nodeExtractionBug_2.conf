/*


*/


import("http://dbtune.org/jamendo/sparql/","SPARQL");

// starting instances including the "broken record" http://dbtune.org/jamendo/record/5359 
sparql.instances = {
"http://dbtune.org/jamendo/record/2350",
"http://dbtune.org/jamendo/record/1418",
"http://dbtune.org/jamendo/record/2916",
"http://dbtune.org/jamendo/record/752"
};

// if the recursion depth = 1, the error does not occur, but the results
// will also be worthless...
sparql.recursionDepth = 2;

sparql.replacePredicate=[(
"http://www.holygoat.co.uk/owl/redwood/0.1/tags/taggedWithTag",
"http://www.w3.org/1999/02/22-rdf-syntax-ns#type")];

sparql.saveExtractedFragment = true;

// importing a testing owl
import("moreThan80.owl");

// positive examples = records liked/listened to by user
// we want to learn from positive examples only

problem = posOnlyLP;
+"http://dbtune.org/jamendo/record/752"
+"http://dbtune.org/jamendo/record/1418"

// we use the new CELOE algorithm
algorithm = celoe;
celoe.maxExecutionTimeInSeconds = 2;
celoe.useHasValueConstructor = true;
celoe.valueFrequencyThreshold = 2;

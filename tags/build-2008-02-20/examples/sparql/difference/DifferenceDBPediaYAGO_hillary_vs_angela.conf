/**
Note: DBpedia is always subject to change, solutions will change over time

 * Solutions:
http://dbpedia.org/class/yago/Achiever109762821 (length 1, depth 1)
  http://dbpedia.org/class/yago/Intellectual109621545 (length 1, depth 1)
 */
 
 

// recursion depth of extraction algorithm
sparql.recursionDepth = 1;


//predefined filter (1 = YAGO based learning)
// 2 = SKOS, more Options are needed then though. replacePredicate, breakSuperClassRetrievalAfter
sparql.predefinedFilter = 1;

sparql.predefinedEndpoint = 1;

// use DBpedia endpoint
import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL");

// the set of objects as starting point for fragment selection
// (should be identical to the set of examples)
sparql.instances = {
  "http://dbpedia.org/resource/Angela_Merkel",
  "http://dbpedia.org/resource/Hillary_Rodham_Clinton"
};


/** examples **/
+"http://dbpedia.org/resource/Hillary_Rodham_Clinton"
-"http://dbpedia.org/resource/Angela_Merkel"

/**
 * Some people from Greece.
 * Note: DBpedia is always subject to change, solutions will change over time

 * Possible Solution:
 *    Theorist OR (Mathematician AND Physicist)
 *
 */

// SPARQL options
sparql.recursionDepth = 1;

//predefined filter (1 = YAGO based learning)
sparql.predefinedFilter = "YAGO";
sparql.predefinedEndpoint = "DBPEDIA";

import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL");
algorithm = refexamples;
reasoner = fastInstanceChecker;

sparql.instances = {
  "http://dbpedia.org/resource/Democritus",
  "http://dbpedia.org/resource/Zeno_of_Elea",
  "http://dbpedia.org/resource/Plato",
  "http://dbpedia.org/resource/Socrates",
  "http://dbpedia.org/resource/Archytas",
  "http://dbpedia.org/resource/Pythagoras",
  "http://dbpedia.org/resource/Philolaus"
};

+"http://dbpedia.org/resource/Pythagoras"
+"http://dbpedia.org/resource/Philolaus"
+"http://dbpedia.org/resource/Archytas"
-"http://dbpedia.org/resource/Socrates"
-"http://dbpedia.org/resource/Plato"
-"http://dbpedia.org/resource/Zeno_of_Elea"
-"http://dbpedia.org/resource/Democritus"

/**
 * moosique.net test example
 */ 

// select the Jamendo endpoint as knowledge source
// import("http://dbtune.org:2105/sparql/","SPARQL");
import("http://dbtune.org/jamendo/sparql/","SPARQL");

// select a set of "starting instances" => this includes positive examples (tracks/albums/artists 
// last heard) as well as randomly selected objects of the same type (track/album/artist) - 
// preferably those which have at least e.g. 3 tags;
// starting from these instances, DL-Learner extracts a fragment of the Jamendo knowledge base
sparql.instances = {
"http://dbtune.org/jamendo/record/1059",
"http://dbtune.org/jamendo/record/1162",
"http://dbtune.org/jamendo/record/1262",
"http://dbtune.org/jamendo/record/1363",
"http://dbtune.org/jamendo/record/1465",
"http://dbtune.org/jamendo/record/1568",
"http://dbtune.org/jamendo/record/1668",
"http://dbtune.org/jamendo/record/1769",
"http://dbtune.org/jamendo/record/1869",
"http://dbtune.org/jamendo/record/1970"
};

// recursion depth => the maximum distance of an object in the fragment from one of
// the starting instances
sparql.recursionDepth = 2;

// we transform tags to classes (such that we can build a taxonomy of tags) on the fly;
// => later we may send the taxonomy to Yves if he is interested in using a taxonomy instead
// of plain tags
sparql.replacePredicate=[(
"http://www.holygoat.co.uk/owl/redwood/0.1/tags/taggedWithTag",
"http://www.w3.org/1999/02/22-rdf-syntax-ns#type")];

// whether to save the extracted fragment (use e.g. Protege to view it);
// by default this goes to fragmentOntology.owl in the DL-Learner directory
sparql.saveExtractedFragment = true;

// we now import the background knowledge including the taxonomy of tags
// (but you can specify any additional knowledge in this file - the more
// knowledge available, the better the suggestions)
// you can use e.g. Protege to create the taxonomy 
// (set File >> Preferences >> Renderer to qnames) or a plain text editor
import("jamendo.owl");

// we want to learn from positive examples only
problem = posOnlyLP;
// positive examples = records liked/listened to by user
+"http://dbtune.org/jamendo/record/1059"
+"http://dbtune.org/jamendo/record/1162"
+"http://dbtune.org/jamendo/record/1262"

// we use the new CELOE algorithm
algorithm = celoe;
// set the start class to the correct type (Record in this case) - not supported yet
// celoe.startClass = "http://purl.org/ontology/mo/Record";
// let it run for a short amount of time (we only want simple expressions)
celoe.maxExecutionTimeInSeconds = 2;
// use owl:hasValue if appropriate
// see: http://www.w3.org/TR/2008/WD-owl2-syntax-20081202/#Individual_Value_Restriction
// not sure whether this greatly influences the results
celoe.useHasValueConstructor = true;
celoe.valueFrequencyThreshold = 2;

// the conversion to natural language is not yet covered here; 
// you can use the class org.dllearner.sparql.NaturalLanguageDescriptionConverter for this,
// but the implementation is quite bad at the moment;
// the web service contains a method getNaturalDescription() using the class above

/**
 * Uncle Example
 *
 * possible solution: (male AND (EXISTS hasSibling.EXISTS hasChild.TOP 
 *                    OR EXISTS married.EXISTS hasSibling.EXISTS hasChild.TOP))
 *
 * The complexity of the learning task depends to a large extend on the length
 * of the smallest possible solution. For this reason this is a very hard 
 * learning task, despite the simplicity of the background knowledge.
 *
 * Note: Currently the data is insufficient, i.e. it allows the algorithm to
 *       to find shorter correct solutions than the desired one above.
 *
 * Copyright (C) 2007, Jens Lehmann
 */
// declare some prefixes to use as abbreviations
prefixes = [ ("kb","http://localhost/foo#") ]

// knowledge source definition
ks.type = "KB File"
ks.url = "uncle.kb"
// ks.baseDir = "examples/family"; //Assuming running from parent directory of examples.

// reasoner
reasoner.type = "fast instance checker"
reasoner.reasonerComponent = embeddedReasoner

embeddedReasoner.type = "OWL API Reasoner"
embeddedReasoner.sources = { ks }

// learning problem
lp.type = "posNegStandard"
lp.positiveExamples = {"kb:heinrich","kb:alfred","kb:heinz","kb:hans","kb:alex"}
lp.negativeExamples = {"kb:jan","kb:markus","kb:susi","kb:anna","kb:maria","kb:katrin","kb:johanna","kb:mandy","kb:miriam","kb:hanna"}

// plug a reasoner into the learning problem
lp.reasoner = reasoner
//lp.reasoner = reasoner - try to remove the component:part in the parser

// create a refinement operator and configure it
op.type = "rho"
op.useCardinalityRestrictions = true
op.reasoner = reasoner

// create a heuristic and configure it
h.type = "multiheuristic"
h.expansionPenaltyFactor = 0.2

// create learning algorithm to run
alg.type = "ocel"
alg.reasoner = reasoner
alg.operator = op
alg.heuristic = h
alg.maxExecutionTimeInSeconds = 15
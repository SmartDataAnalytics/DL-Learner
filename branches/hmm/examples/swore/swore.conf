/**
 * Example file for typical ontology engineering setup.
 *
 * SWORE is the SoftWiki ontology for requirements engineering.
 *
 * Desired Solution:
 * CustomerRequirement = Requirement AND EXISTS createdBy Customer
 */
 
prefixes = [ ("kb","http://ns.softwiki.de/req/") ]
 
// knowledge source definition 
ks.type = "OWL File"
ks.fileName = "swore.rdf" 

// reasoner
reasoner.type = "fast instance checker"
reasoner.sources = { ks }

// learning problem
lp.type = "posNegStandard"
lp.positiveExamples = {
"kb:determineCoreRequirements",
"kb:determineSystemRequirements",
"kb:CreateVersion1"
}
lp.negativeExamples = {
"kb:CreateVersion2",
"kb:CreateACheaperSoftware",
"kb:unimportant",
"kb:TextualScenario4",
"kb:TextualScenario5",
"kb:TextualScenario6",
"kb:UseDatabaseToStoreUserData",
"kb:1",
"kb:2",
"kb:3",
"kb:4",
"kb:5",
"kb:6",
"kb:7",
"kb:8",
"kb:9",
"kb:important",
"kb:ActiveHelpDialog",
"kb:Andrew_Stellman",
"kb:calculations",
"kb:Charlotte_Blay",
"kb:comment",
"kb:Derick_Garnier",
"kb:loadGUIInUnder2Sec",
"kb:LogEveryUserActivity",
"kb:MultiTabSystem",
"kb:MultiUserSystem",
"kb:MultiWindowSystem",
"kb:SystemStabilityRequirement",
"kb:technical_details",
"kb:Derick_Garnier",
"kb:UseOfIcons",
"kb:UserCanAccessDataFromEveryComputer",
"kb:WindowDesign"
}


alg.type = "ocel"

// ignore class for which we want to learn a definition
alg.ignoredConcepts = { "kb:CustomerRequirement" }

// we usually have a configurable minimum accuracy and should set noise to 100 - (min. accuracy)/2
// because min. accuracy is recommended to be 90%, we set the noise value to 5%
alg.noisePercentage = 5

// we do not want to terminate when the noise level is reached
alg.terminateOnNoiseReached = false

// maximum execution time should be sufficiently low value (because the user has to wait for the result)
alg.maxExecutionTimeInSeconds = 5

// create a heuristic and configure it
// negations are penalised, because they are often not desired, e.g. 
// $superclass AND NOT $neighbourclass1 AND NOT $neighbourclass2 is
// one of the patterns which is learned but only sometimes/rarely useful
h.type = "multiheuristic"
h.expansionPenaltyFactor = 2

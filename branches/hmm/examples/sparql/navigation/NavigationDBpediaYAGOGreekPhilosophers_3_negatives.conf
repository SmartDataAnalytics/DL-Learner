/**
 * Three philsosphers from Greece.
 * One additional negative is added in 1 and 2 
 * Note: DBpedia is always subject to change, solutions will change over time
 
http://dbpedia.org/resource/Archytas
Archytas (428 BC  347 BC) was an Ancient Greek philosopher, 
mathematician, astronomer, statesman, and strategist.
http://dbpedia.org/resource/Pythagoras
Pythagoras of Samos between 580 and 572 BC between 500 and 490 BC) 
was an Ionian (Greek) philosopher[1] and founder 
of the religious movement called Pythagoreanism.
He is often revered as a great mathematician, mystic and scientist;
http://dbpedia.org/resource/Philolaus
Philolaus (ca. 480 BC   ca. 385 BC, Greek:
Philolaus was a Greek Pythagorean and Presocratic.

solutions:
  http://dbpedia.org/class/yago/Mathematician110301261 (length 1, depth 1)
horizontal expansion: 0 to 1
size of candidate set: 12
properness tests (reasoner/short concept/too weak list): 20/0/0
concept tests (reasoner/too weak list/overly general list/redundant concepts): 20/0/0/0
Algorithm terminated succesfully.
number of instance checks: 82 (31 multiple)
instance check reasoning time: 132ms ( 1ms per instance check)
subsumption hierarchy queries: 11
(complex) subsumption checks: 20 (9 multiple)
subsumption reasoning time: 33ms ( 1ms per subsumption check)
overall reasoning time: 165ms (88,67% of overall runtime)
overall algorithm runtime: 186ms

 */


lp.positiveExamples = {
  "http://dbpedia.org/resource/Pythagoras",
  "http://dbpedia.org/resource/Philolaus",
  "http://dbpedia.org/resource/Archytas"
}
lp.negativeExamples = {  
"http://dbpedia.org/resource/Zeno_of_Elea",
"http://dbpedia.org/resource/Plato",
"http://dbpedia.org/resource/Socrates"
} 


// SPARQL options
sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbpedia.openlinksw.com:8890/sparql"
sparql.defaultGraphURIs = {"http://dbpedia.org"}
sparql.recursionDepth = 1
//TODOREFACTOR check if predefinedFilter works at all
sparql.predefinedFilter = "YAGO"
sparql.instances = {
  "http://dbpedia.org/resource/Pythagoras",
  "http://dbpedia.org/resource/Philolaus",
  "http://dbpedia.org/resource/Archytas",

  "http://dbpedia.org/resource/Zeno_of_Elea",
  "http://dbpedia.org/resource/Plato",
  "http://dbpedia.org/resource/Socrates"
}


reasoner.type = "fast instance checker"
reasoner.sources = {sparql}

lp.type = "posNegStandard"
lp.reasoner = reasoner

// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner

/**
 * Learning problem involving some actors.
 * Compared to Actors.conf this has on more positive Example and does not learn only/not/<>
 *
 * Note: DBpedia is always subject to change, solutions will change over time
 */

// SPARQL options
sparql.type = "SPARQL endpoint fragment"
sparql.url = "http://dbpedia.openlinksw.com:8890/sparql"
sparql.defaultGraphURIs = {"http://dbpedia.org"}
// recursion depth of extraction algorithm
sparql.recursionDepth = 1
//TODOREFACTOR check if predefinedFilter works at all
//predefined filter (1 = YAGO based learning)
// 2 = SKOS, more Options are needed then though. replacePredicate, breakSuperClassRetrievalAfter
sparql.predefinedFilter = "YAGO"

// the set of objects as starting point for fragment selection
// (should be identical to the set of examples)
sparql.instances = {
"http://dbpedia.org/resource/Matt_Stone",
"http://dbpedia.org/resource/Sarah_Silverman",
"http://dbpedia.org/resource/Jim_Carrey",
"http://dbpedia.org/resource/Jason_Mewes",
"http://dbpedia.org/resource/Kevin_Smith",
"http://dbpedia.org/resource/Trey_Parker",
"http://dbpedia.org/resource/Adam_Sandler"
}

reasoner.type = "fast instance checker"
reasoner.sources = {sparql}

lp.type = "posNegStandard"
lp.positiveExamples = {
"http://dbpedia.org/resource/Matt_Stone",
"http://dbpedia.org/resource/Sarah_Silverman" ,
"http://dbpedia.org/resource/Kevin_Smith"
}
lp.negativeExamples = {
"http://dbpedia.org/resource/Jim_Carrey",
"http://dbpedia.org/resource/Jason_Mewes",
"http://dbpedia.org/resource/Trey_Parker",
"http://dbpedia.org/resource/Adam_Sandler"
} 
lp.reasoner = reasoner

// create a refinement operator and configure it
op.type = "rho"
op.useNegation = false
op.useAllConstructor = false
op.useCardinalityRestrictions = false
op.reasoner = reasoner

// we use the OCEL algorithm
alg.type = "ocel"
alg.reasoner = reasoner
alg.operator = op


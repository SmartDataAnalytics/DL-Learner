import("combined.rdf");

algorithm = ocel;
ocel.noisePercentage = 10;
ocel.maxExecutionTimeInSeconds = 60;
ocel.writeSearchTree = true;
ocel.searchTreeFile = "/tmp/log.txt";
ocel.replaceSearchTree = true;
//ocel.startClass = "http://nlp2rdf.org/ontology/Sentence";

ocel.useExistsConstructor = true;
ocel.useAllConstructor = false;
ocel.useNegation = false;
//ocel.useDataHasValueConstructor = true;
//ocel.valueFrequencyThreshold = 13;

/**

//allowedConcepts, allowedRoles, applyAllFilter, applyExistsFilter, cardinalityLimit, expansionPenaltyFactor, 
forceRefinementLengthIncrease, guaranteeXgoodDescriptions, heuristic, horizontalExpansionFactor, 
ignoredConcepts, ignoredRoles, improveSubsumptionHierarchy, instanceBasedDisjoints, logLevel,
 maxClassDescriptionTests, maxExecutionTimeInSeconds, minExecutionTimeInSeconds, 
 negationPenalty, negativeWeight, noisePercentage, replaceSearchTree, searchTreeFile, 
 startClass, startNodeBonus, terminateOnNoiseReached, useAllConstructor, useBooleanDatatypes, 
 useCardinalityRestrictions, useDataHasValueConstructor, useDoubleDatatypes, useExistsConstructor, 
 useHasValueConstructor, useNegation, useOverlyGeneralList, usePropernessChecks, useShortConceptConstruction,
  useStringDatatypes, useTooWeakList, valueFrequencyThreshold, writeSearchTree].
**/

+"http://nlp2rdf.org/ontology/s19832"
+"http://nlp2rdf.org/ontology/s25995"
+"http://nlp2rdf.org/ontology/s26867"
+"http://nlp2rdf.org/ontology/s29778"
+"http://nlp2rdf.org/ontology/s31487"
+"http://nlp2rdf.org/ontology/s31994"
+"http://nlp2rdf.org/ontology/s33592"
+"http://nlp2rdf.org/ontology/s36480"
+"http://nlp2rdf.org/ontology/s36630"
+"http://nlp2rdf.org/ontology/s37885"
+"http://nlp2rdf.org/ontology/s39264"
+"http://nlp2rdf.org/ontology/s42257"
+"http://nlp2rdf.org/ontology/s47997"
+"http://nlp2rdf.org/ontology/s48009"
+"http://nlp2rdf.org/ontology/s5887"
-"http://nlp2rdf.org/ontology/s16108"
-"http://nlp2rdf.org/ontology/s27089"
-"http://nlp2rdf.org/ontology/s27289"
-"http://nlp2rdf.org/ontology/s29380"
-"http://nlp2rdf.org/ontology/s29695"
-"http://nlp2rdf.org/ontology/s357"
-"http://nlp2rdf.org/ontology/s36940"
-"http://nlp2rdf.org/ontology/s39598"
-"http://nlp2rdf.org/ontology/s41799"
-"http://nlp2rdf.org/ontology/s44644"
-"http://nlp2rdf.org/ontology/s4624"
-"http://nlp2rdf.org/ontology/s46785"
-"http://nlp2rdf.org/ontology/s50417"
-"http://nlp2rdf.org/ontology/s5948"
-"http://nlp2rdf.org/ontology/s9348"


/**
Good:
SELECT DISTINCT ?subject  { 
?subject a <http://nlp2rdf.org/ontology/Sentence> . 
?subject <http://nlp2rdf.org/ontology/hasToken> ?object0. 
?object0 a <http://nlp2rdf.org/ontology/VVPP> . 
?subject <http://nlp2rdf.org/ontology/hasToken> ?object1. 
?object1 <http://nlp2rdf.org/ontology/hasLemma>  "werden"  
 } 
Bad:
SELECT DISTINCT ?subject  { 
?subject a <http://nlp2rdf.org/ontology/Sentence> . 
?subject <http://nlp2rdf.org/ontology/hasToken> ?object0. 
?object0 a <http://nlp2rdf.org/ontology/VVPP>  
 } **/

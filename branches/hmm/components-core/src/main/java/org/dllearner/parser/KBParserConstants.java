/**
 * Copyright (C) 2007-2011, Jens Lehmann
 *
 * This file is part of DL-Learner.
 *
 * DL-Learner is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DL-Learner is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Generated By:JavaCC: Do not edit this line. KBParserConstants.java */
package org.dllearner.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface KBParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int COMMAND_END = 8;
  /** RegularExpression Id. */
  int ID = 9;
  /** RegularExpression Id. */
  int NUMBER = 10;
  /** RegularExpression Id. */
  int DOUBLE = 11;
  /** RegularExpression Id. */
  int TOP = 12;
  /** RegularExpression Id. */
  int BOTTOM = 13;
  /** RegularExpression Id. */
  int AND = 14;
  /** RegularExpression Id. */
  int OR = 15;
  /** RegularExpression Id. */
  int EXISTS = 16;
  /** RegularExpression Id. */
  int ALL = 17;
  /** RegularExpression Id. */
  int NOT = 18;
  /** RegularExpression Id. */
  int GE = 19;
  /** RegularExpression Id. */
  int LE = 20;
  /** RegularExpression Id. */
  int STRING = 21;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\".\"",
    "<ID>",
    "<NUMBER>",
    "<DOUBLE>",
    "\"TOP\"",
    "\"BOTTOM\"",
    "\"AND\"",
    "\"OR\"",
    "<EXISTS>",
    "<ALL>",
    "<NOT>",
    "\">=\"",
    "\"<=\"",
    "<STRING>",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"=\"",
    "\"SUBCLASSOF\"",
    "\"SUB\"",
    "\"Transitive\"",
    "\"Functional\"",
    "\"Symmetric\"",
    "\"Inverse\"",
    "\"Subrole\"",
    "\"SUBCONCEPTOF\"",
    "\"DOMAIN\"",
    "\"OPDOMAIN\"",
    "\"OBJECTPROPERTYDOMAIN\"",
    "\"DPDOMAIN\"",
    "\"DATATYPEPROPERTYDOMAIN\"",
    "\"RANGE\"",
    "\"OPRANGE\"",
    "\"OBJECTPROPERTYRANGE\"",
    "\"DPRANGE\"",
    "\"DATATYPEPROPERTYRANGE\"",
    "\"DOUBLE\"",
    "\"BOOLEAN\"",
    "\"INTEGER\"",
    "\"IS\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"HASVALUE\"",
    "\"STRINGVALUE\"",
  };

}

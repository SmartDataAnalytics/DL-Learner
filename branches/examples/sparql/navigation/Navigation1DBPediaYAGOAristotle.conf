/**
 * Some people from Greece.
 * Note: DBpedia is always subject to change, solutions will change over time

solutions:
  (http://dbpedia.org/class/yago/Theorist110706812 OR (http://dbpedia.org/class/yago/Mathematician110301261 AND http://dbpedia.org/class/yago/Physicist110428004)) (length 5, depth 3)
horizontal expansion: 3 to 5
size of candidate set: 1648
properness tests (reasoner/short concept/too weak list): 9059/1/884
concept tests (reasoner/too weak list/overly general list/redundant concepts): 2240/884/1286/3926
Algorithm terminated succesfully.
number of instance checks: 8164 (2601 multiple)
instance check reasoning time: 15s 461ms ( 1ms per instance check)
subsumption hierarchy queries: 8776
(complex) subsumption checks: 9059 (3132 multiple)
subsumption reasoning time: 13s 388ms ( 1ms per subsumption check)
overall reasoning time: 28s 850ms (94,717% of overall runtime)
overall algorithm runtime: 30s 459ms

 */

// recursion depth of extraction algorithm
sparql.recursionDepth = 1;


//predefined filter (1 = YAGO based learning)
// 2 = SKOS, more Options are needed then though. replacePredicate, breakSuperClassRetrievalAfter
sparql.predefinedFilter = "YAGO";
sparql.predefinedEndpoint = "DBPEDIA";

import("http://dbpedia.openlinksw.com:8890/sparql","SPARQL");

sparql.instances = {
   "http://dbpedia.org/resource/Pythagoras",
   "http://dbpedia.org/resource/Philolaus", 
   "http://dbpedia.org/resource/Archytas",
 
 
   "http://dbpedia.org/resource/Socrates",
   "http://dbpedia.org/resource/Plato",
   "http://dbpedia.org/resource/Zeno_of_Elea",
   "http://dbpedia.org/resource/Democritus"

};

+"http://dbpedia.org/resource/Pythagoras"
+"http://dbpedia.org/resource/Philolaus"
+"http://dbpedia.org/resource/Archytas"


-"http://dbpedia.org/resource/Socrates"
-"http://dbpedia.org/resource/Plato"
-"http://dbpedia.org/resource/Zeno_of_Elea"
-"http://dbpedia.org/resource/Democritus"



